const puppeteer = require('puppeteer');
const assert = require('chai').assert;
const axios = require('axios');

function getFormattedDate() {
    var date = new Date();
    var str = "" + date.getFullYear() + (date.getMonth() + 1) + date.getDate() + date.getHours() + date.getMinutes() + date.getSeconds();
    return str;
}


const plength = 18;
const plengthNew = 14;
const whithoutCaps = 16;
const whithoutAlpha = 15;
const whithoutInt = 27;
const whithoutCpec = 20;
const Least = 4;


function generatePass(plength){

    var keylistalpha="abcdefghijklmnopqrstuvwxyz";
    var keylistcaps="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var keylistint="123456789";
    var keylistspec="!@#$%^&*()+~`|}{[]:;?><,./-=";
    var temp='';
      if(plength % 2 == 0){
      var len = plength/2;
      } else {
      var len = plength/2 - 0.5;
      }

      if(len/2 % 2 == 0 || len/2==1){
      var lencaps = len/2;
      } else {
      var lencaps = len/2 - 0.5;
      }

      var lens = plength - len - lencaps - 1;
      var lenspec = plength-len-lencaps-lens;

    for (i=0;i<len;i++)
        temp+=keylistalpha.charAt(Math.floor(Math.random()*keylistalpha.length));

    for (i=0;i<lencaps;i++)
        temp+=keylistcaps.charAt(Math.floor(Math.random()*keylistcaps.length));

    for (i=0;i<lens;i++)
        temp+=keylistint.charAt(Math.floor(Math.random()*keylistint.length));

    for (i=0;i<lenspec;i++)
        temp+=keylistspec.charAt(Math.floor(Math.random()*keylistspec.length));

        temp=temp.split('').sort(function(){return 0.5-Math.random()}).join('');

    return temp;
}



function generateCaps(whithoutCaps){

    var keylistalpha="abcdefghijklmnopqrstuvwxyz";
    var keylistint="123456789";
    var keylistspec="!@#$%^&*()+~`|}{[]:;?><,./-=";
    var temp='';
      if(whithoutCaps % 2 == 0){
      var len = whithoutCaps/2;
      } else {
      var len = whithoutCaps/2 - 0.5;
      }
    var lens = whithoutCaps - len - 1;
    var lenspec = whithoutCaps-len-lens;

    for (i=0;i<len;i++)
        temp+=keylistalpha.charAt(Math.floor(Math.random()*keylistalpha.length));

    for (i=0;i<lens;i++)
        temp+=keylistint.charAt(Math.floor(Math.random()*keylistint.length));

    for (i=0;i<lenspec;i++)
        temp+=keylistspec.charAt(Math.floor(Math.random()*keylistspec.length));

        temp=temp.split('').sort(function(){return 0.5-Math.random()}).join('');

    return temp;
}



function generateAlpha(whithoutAlpha){

    var keylistcaps="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var keylistint="123456789";
    var keylistspec="!@#$%^&*()+~`|}{[]:;?><,./-=";
    var temp='';
      if(whithoutAlpha % 2 == 0){
      var len = whithoutAlpha/2;
      } else {
      var len = whithoutAlpha/2 - 0.5;
      }
      var lens = whithoutAlpha - len - 1;
      var lenspec = whithoutAlpha-len-lens;

    for (i=0;i<len;i++)
        temp+=keylistcaps.charAt(Math.floor(Math.random()*keylistcaps.length));

    for (i=0;i<lens;i++)
        temp+=keylistint.charAt(Math.floor(Math.random()*keylistint.length));

    for (i=0;i<lenspec;i++)
        temp+=keylistspec.charAt(Math.floor(Math.random()*keylistspec.length));

        temp=temp.split('').sort(function(){return 0.5-Math.random()}).join('');

    return temp;
}



function generateInt(whithoutInt){

    var keylistalpha="abcdefghijklmnopqrstuvwxyz";
    var keylistcaps="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var keylistspec="!@#$%^&*()+~`|}{[]:;?><,./-=";
    var temp='';
      if(whithoutInt % 2 == 0){
      var len = whithoutInt/2;
      } else {
      var len = whithoutInt/2 - 0.5;
      }
      var lens = whithoutInt - len - 1;
      var lenspec = whithoutInt-len-lens;

    for (i=0;i<len;i++)
        temp+=keylistalpha.charAt(Math.floor(Math.random()*keylistalpha.length));

    for (i=0;i<lens;i++)
        temp+=keylistcaps.charAt(Math.floor(Math.random()*keylistcaps.length));

    for (i=0;i<lenspec;i++)
        temp+=keylistspec.charAt(Math.floor(Math.random()*keylistspec.length));

        temp=temp.split('').sort(function(){return 0.5-Math.random()}).join('');

    return temp;
}



function generateCpec(whithoutCpec){

    var keylistalpha="abcdefghijklmnopqrstuvwxyz";
    var keylistcaps="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var keylistint="123456789";
    var temp='';
      if(whithoutInt % 2 == 0){
      var len = whithoutCpec/2;
      } else {
      var len = whithoutCpec/2 - 0.5;
      }
      var lens = whithoutCpec - len - 1;
      var lenspec = whithoutCpec-len-lens;

    for (i=0;i<len;i++)
        temp+=keylistalpha.charAt(Math.floor(Math.random()*keylistalpha.length));

    for (i=0;i<lens;i++)
        temp+=keylistcaps.charAt(Math.floor(Math.random()*keylistcaps.length));

    for (i=0;i<lenspec;i++)
        temp+=keylistint.charAt(Math.floor(Math.random()*keylistint.length));

        temp=temp.split('').sort(function(){return 0.5-Math.random()}).join('');

    return temp;
}




function generateLeast(Least){

    var keylistalpha="abcdefghijklmnopqrstuvwxyz";
    var keylistcaps="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var keylistint="123456789";
    var keylistspec="!@#$%^&*()+~`|}{[]:;?><,./-=";
    var temp='';
      if(Least % 2 == 0){
      var len = Least/2;
      } else {
      var len = Least/2 - 0.5;
      }

      if(len/2 % 2 == 0 || len/2==1){
      var lencaps = len/2;
      } else {
      var lencaps = len/2 - 0.5;
      }

    var lens = Least - len - lencaps - 1;
    var lenspec = Least-len-lencaps-lens;

    for (i=0;i<len;i++)
        temp+=keylistalpha.charAt(Math.floor(Math.random()*keylistalpha.length));

    for (i=0;i<lencaps;i++)
        temp+=keylistcaps.charAt(Math.floor(Math.random()*keylistcaps.length));

    for (i=0;i<lens;i++)
        temp+=keylistint.charAt(Math.floor(Math.random()*keylistint.length));

    for (i=0;i<lenspec;i++)
        temp+=keylistspec.charAt(Math.floor(Math.random()*keylistspec.length));

        temp=temp.split('').sort(function(){return 0.5-Math.random()}).join('');

    return temp;
}



const creds = {
    email: "tsygan199+test_" + getFormattedDate() + "@protonmail.com",
    email1: "tsygan199+test1_" + getFormattedDate() + "@protonmail.com",
    email2: "tsygan199+test2_" + getFormattedDate() + "@protonmail.com",
    email3: "tsygan199+test3_" + getFormattedDate() + "@protonmail.com",
    email4: "tsygan199+test4_" + getFormattedDate() + "@protonmail.com",
    email5: "tsygan199+test5_" + getFormattedDate() + "@protonmail.com",
    email6: "tsygan199+test6_" + getFormattedDate() + "@protonmail.com",
    email7: "tsygan199+test7_" + getFormattedDate() + "@protonmail.com",
    email8: "tsygan199+test8_" + getFormattedDate() + "@protonmail.com",
    emailNew3: "tsygan199+testNew3_" + getFormattedDate() + "@protonmail.com",
    // emailNew1: "tsygan199+testNew1_" + getFormattedDate() + "@protonmail.com",
    password:  generatePass(plength),
    password1:  generatePass(plength),
    password2:  generatePass(plength),
    password3:  generatePass(plength),
    password4:  generatePass(plength),
    password5:  generatePass(plength),
    password6:  generatePass(plength),
    password7:  generatePass(plength),
    password8:  generatePass(plength),
    passwordNew3:  generatePass(plength),
    passwordFog4:  generatePass(plength),
    passwordNew4:  generatePass(plength),
    passwordNew5:  generatePass(plength),
    name: generatePass(plength),
    name1: generatePass(plength),
    name2: generatePass(plength),
    name3: generatePass(plength),
    name4: generatePass(plength),
    name5: generatePass(plength),
    name6: generatePass(plength),
    name7: generatePass(plength),
    name8: generatePass(plength),
    // passwordPass: generatePass(plength),
    passwordCaps: generateCaps(whithoutCaps),
    passwordAlpha: generateAlpha(whithoutAlpha),
    passwordInt: generateInt(whithoutInt),
    passwordCpec: generateCpec(whithoutCpec),
    passwordLeast: generateLeast(Least)
};






async function authorization (page, name, email) {

    await page.waitForTimeout(7000);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Includes terminal!!!');
    await logOut(page);
  } else {
      console.log('Includes auth!!!');
  }

      await page.waitForTimeout(2000);
//  registration
 await page.click(`.btn-registration-show`);
//  name
    await page.waitForSelector(`input.registration-first-control`);
await page.type(`input.registration-first-control`, name);
// email
    await page.waitForSelector(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`);
await page.type(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`, email);
// i read and agree
await page.click(`.liKFcE:nth-of-type(4) .MuiSvgIcon-root`);
// start now   
    await page.waitForSelector(`.liKFcE:nth-of-type(5) button`);
await page.click(`.liKFcE:nth-of-type(5) button`);
    
    console.log('Success registr login!');
// got it
    await page.waitForTimeout(2000);
    await page.waitForSelector(`button.btn-white`);
await page.click(`button.btn-white`);

    await page.waitForTimeout(2000);
}




async function authorizationRefferal (page, name, email) {

    await page.waitForTimeout(7000);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Includes terminal!!!');
    await logOut(page);
  } else {
      console.log('Includes auth!!!');
  }

      await page.waitForTimeout(2000);
//  registration
await page.waitForSelector(`.btn-registration-show`);
await page.click(`.btn-registration-show`);
//  name
    await page.waitForSelector(`input.registration-first-control`);
await page.type(`input.registration-first-control`, name);
// email
    await page.waitForSelector(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`);
await page.type(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`, email);
// referals
await page.type(`input#filled-adornment-refer`, "");

    await page.waitForTimeout(1000);

await page.keyboard.down('Control');
await page.keyboard.press('V');
await page.keyboard.up('Control');
// i read and agree 
await page.click(`.liKFcE:nth-of-type(4) .MuiSvgIcon-root`);
// start now     
   await page.waitForSelector(`.liKFcE:nth-of-type(5) button`);
await page.click(`.liKFcE:nth-of-type(5) button`);
    
    console.log('Success registr login!');
    await page.waitForTimeout(2000);
// got it    
    await page.waitForSelector(`button.btn-white`);
await page.click(`button.btn-white`);

    await page.waitForTimeout(2000);
}





async function logIn (page, email, password) {
     await page.waitForTimeout(2000);
    await page.waitForSelector(`input[name="email"]`);
await page.type(`input[name="email"]`, email);
await page.type(`input[name="password"]`, password);
await page.click(`.auth-form button[type="submit"]`);

     await page.waitForTimeout(2000);

  const url = page.url();
    if (url.includes('terminal')) {
        console.log('Includes terminal!!!');

      console.log('Success login!');

     await page.waitForTimeout(2000);    
      // await page.waitForNavigation({timeout: 6000}); 
    } else {
        console.log('Not login!!!');

    }
}



async function logInTotp (page, email, password) {
     await page.waitForTimeout(2000);
    await page.waitForSelector(`input[name="email"]`);
await page.type(`input[name="email"]`, email);
await page.type(`input[name="password"]`, password);
await page.click(`.auth-form button[type="submit"]`);

    await page.waitForXPath(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
const comeLogTotp = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
await comeLogTotp[0].type('111111');

const totpNextCome = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[3]/button`);
await totpNextCome[0].click();
  
    console.log('Success login totp!');

    await page.waitForNavigation({timeout: 6000}); 
}



async function logOut (page) {

await page.waitForTimeout(1000);
    await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[2]/div[2]/div/div/button/span[1]`);
const logOutMenu = await page.$x(`/html/body/div[1]/div/div[1]/div/div[1]/ul[2]/div[2]/div/div/button/span[1]`);
await logOutMenu[0].click();

    await page.waitForTimeout(1000);
    await page.waitForXPath(`//*[@class="MuiTypography-root logout MuiTypography-body1"]`);
const logOut = await page.$x(`//*[@class="MuiTypography-root logout MuiTypography-body1"]`);
await logOut[0].click();

    console.log('Success logout!');

    await page.waitForTimeout(2000);
}



async function profilPage (page) {
    // await page.waitForTimeout(3000);
//     await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[2]/div[2]/div`);
// const profilPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[2]/div[2]/div');
// await profilPage[0].click();


await page.goto('https://bitboardexchange.com/profile');

    console.log('Success profil page!');
  }



async function enableDisableTotp (page, enable_disable) {

const disableTotp = await page.$x(`//span[contains(text(),"TOTP")]`);
await disableTotp[0].click();

    await page.waitForTimeout(1000);
    await page.waitForSelector(`input[name="pin"]`);
await page.type(`input[name="pin"]`,'111111');

const butTotp = await page.$x(`//span[text()="Next"]`);
await butTotp[0].click();

    console.log('Success totp ' + enable_disable +'!');
}






async function emailProton (page) {

//       await page.waitForSelector(`#bs-example-navbar-collapse-1 > ul > li:nth-child(8) > a`);
// await page.click('#bs-example-navbar-collapse-1 > ul > li:nth-child(8) > a');
    await page.waitForTimeout(5000);
//login protonmail
      await page.waitForSelector(`.btn-ghost.btn-short`);
await page.click(`.btn-ghost.btn-short`);


    console.log('Success site protonmail!'); 

//     await page.waitForTimeout(3000);
//     await page.waitForXPath(`/html/body/div[2]/div[1]/div/div/form/div[1]/input`);
// const emaiLogin = await page.$x(`/html/body/div[2]/div[1]/div/div/form/div[1]/input`);
// await emaiLogin[0].type('tsygan199');

// const emailPaswword = await page.$x(`/html/body/div[2]/div[1]/div/div/form/div[1]/div[1]/input`);
// await emailPaswword[0].type('macarony1993');

//     await page.waitForXPath(`/html/body/div[2]/div[1]/div/div/form/div[1]/div[2]/div/button`);
// const comeButtEmail = await page.$x(`/html/body/div[2]/div[1]/div/div/form/div[1]/div[2]/div/button`);
// await comeButtEmail[0].click();

    await page.waitForTimeout(13000);
      await page.waitForSelector(`input#username`);
await page.type('input#username', 'tsygan199');

      await page.waitForSelector(`input#password`);
await page.type('input#password', 'macarony1993');

    await page.waitForTimeout(5000);
await page.click(`button.button-large.button-large.button-solid-norm`);

//   await page.waitForTimeout(10000);
// const mailOops = await page.$x(`//h2[text()="Oops, something went wrong"]`);                                 
//     console.log(mailOops);
// if (mailOops.length != 0) {
//   console.log('Success Oops !=0');
//   await page.goto(`https://mail.protonmail.com/login`);
// } else {
//   console.log('Success Oops =0'); 
// }

    console.log('Success email login!');
   
    await page.waitForTimeout(18000);
  await page.reload();
    await page.waitForTimeout(7000);
  await page.reload();
    await page.waitForTimeout(7000);
    await page.waitForXPath('/html/body/div[1]/div[3]/div/div/div[2]/div/main/div/div/div/div[2]');
const firstMessage = await page.$x('/html/body/div[1]/div[3]/div/div/div[2]/div/main/div/div/div/div[2]');
await firstMessage[0].click();

    console.log('Success click 1 pismo!');

  await page.waitForTimeout(4000);
await page.reload();
   await page.waitForTimeout(13000);

const letterButton = await page.$x('/html/body/div[1]/div[3]/div[2]/div/div[2]/div/main/section/div/div/article[last()]/div[2]/div/table/tbody/tr[4]/td/a');
                                    
    console.log(letterButton);

if (letterButton.length != 0) {
    console.log('Success !=0'); 
} else {
     await page.waitForXPath(`/html/body/div[1]/div[3]/div[2]/div/div[2]/div/main/section/div/div/article[last()]`);
const openLetter = await page.$x(`/html/body/div[1]/div[3]/div[2]/div/div[2]/div/main/section/div/div/article[last()]`);
await openLetter[0].click();
    console.log('Success open email!');
}
    await page.waitForTimeout(3000);

const elementHandle = await page.$('iframe[src="about:blank"]');
const frame = await elementHandle.contentFrame();

const clickLogin = await frame.click('#proton-root > div:nth-child(2) > div > table > tbody > tr:nth-child(4) > td > a')

    console.log('Success button letter!'); 

await page.waitForTimeout(1000);
}






async function elementDelete (page, xpath) {
let twoDelete = (await page.$x(xpath))[0];
let twoElement = await page.evaluate(el => el.value, twoDelete);
    for (let i = 0; i < twoElement.length; i++) {
    await page.keyboard.press('Backspace');
    } 
}



async function elementArrowRight (page, xpath) {
let twoDelete = (await page.$x(xpath))[0];
let twoElement = await page.evaluate(el => el.value, twoDelete);
    for (let i = 0; i < twoElement.length; i++) {
    await page.keyboard.press('ArrowRight');
    } 
}





async function wrongPassword (page, password1, password2, text, text_err) {

let errorMessageSelector = `.cKJzHK`

    await page.waitForXPath(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`);
const firstPassword = await page.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`);
await firstPassword[0].type(password1);

const confirmPassword = await page.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[2]/div/div/input`);
await confirmPassword[0].type(password2);


// await page.click(`body > div > div > div.auth-wrap > div > section > div:nth-child(2) > form > div:nth-child(3) > button`);

//     await page.waitForSelector(`input.MuiInputBase-inputAdornedEnd`);
// await page.type(`input.MuiInputBase-inputAdornedEnd`, password1);

//     await page.waitForSelector(`input[class="MuiInputBase-input MuiInput-input"]`);
// await page.type(`input[class="MuiInputBase-input MuiInput-input"]`, password2);


    await page.waitForSelector(`button.MuiButton-textPrimary`);
await page.click(`button.MuiButton-textPrimary`);

  if(errorMessageSelector != 0) {
    console.log('Error '+ text + '   !!!!!!!!!!!!!!!!!!!!!!');
      await page.waitForSelector(errorMessageSelector);
  const element = await page.$(errorMessageSelector);
  const textContent = await element.evaluate(node => node.innerText);
    console.log(textContent);
  assert.equal(textContent, text_err);  

    if(textContent != text_err) {
    await page.screenshot({path: 'wrong_text_error_'+ text +'.png'});
      console.log('Wrong_text_error   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
      console.log('--------------------------------------------------------------')
    } else {
      // console.log('Correct text error');
      console.log('--------------------------------------------------------------')
    await page.waitForTimeout(3000);

await confirmPassword[0].type('');

await elementDelete (page, `/html/body/div/div/div[2]/div/section/div[1]/form/div[2]/div/div/input`);

// let twoDelete = (await page.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[2]/div/div/input`))[0];
// let twoElement = await page.evaluate(el => el.value, twoDelete);
//     for (let i = 0; i < twoElement.length; i++) {
//     await page.keyboard.press('Backspace');
//     } 

await firstPassword[0].type('');

await elementDelete (page, `/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`);

// let oneDelete = (await page.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`))[0];
// let oneElement = await page.evaluate(el => el.value, oneDelete);
//       for (let i = 0; i < oneElement.length; i++) {
//       await page.keyboard.press('Backspace');
//       } 
    }
  }
}





async function authOrTerminal (page, email, password) {

    await page.waitForTimeout(7000);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Includes terminal!!!');
    await logOut(page);
    await logIn (page, email, password);
  } else {
      console.log('Includes auth!!!');
    await logIn (page, email, password);
  }
}




async function authTotpOrTerminal (page, email, password) {

    await page.waitForTimeout(10000);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Includes terminal!!!');
  await logOut(page);
  await logInTotp (page, email, password);
  } else {
      console.log('Includes auth!!!');
    await logInTotp (page, email, password);
  }
}




// async function equallyXpath (page, xpath, text, equally) {

// const equallySelector = await page.$x(xpath);

//   if(equallySelector != 0) {
//     console.log('Success  '+ text + ' !!!!!!!!!!!');

//   let elementXpath = (await page.$x(xpath))[0];
//   let textContent = await page.evaluate(el => el.innerText, elementXpath);
//    // console.log(textContent);
//   assert.equal(textContent, equally);  
//   console.log(text + '  = '+ textContent +'   !!!!!!!!!!!!!');

//     if(textContent != equally) {
//     await page.screenshot({path: 'wrong_' + text + '.png'});
//       console.log('Wrong text ' + text +'   ~~~~~~~~~~~~~~~');
//     } else {
//       console.log('Correct text ' + text +'   !!!!!!!!!!!!!');
//       console.log('---------------------------------')
//     }

//   } else {console.log('Not ' + text +'   ~~~~~~~~~~~~~~~');
//   console.log('---------------------------------')
//   }
// }







async function equallyXpathInnerText (page, xpath, text, equally) {

const equallySelector = await page.$x(xpath);

  if(equallySelector != 0) {
    // console.log('Exist  '+ text + '  !!!!!!');

  let elementXpath = (await page.$x(xpath))[0];
  let textContent = await page.evaluate(el => el.innerText, elementXpath);
   // console.log(textContent);
  // assert.equal(textContent, equally);  
  console.log(text + '  = '+ textContent);

    if(textContent != equally) {
    // await page.screenshot({path: 'wrong_' + text + '.png'});
      console.log('Wrong!!!  Right text ' + text +' = '+ equally +'   ~~~~~~~~~~~~~~~~~~~');
      console.log('------------------------------------------')
    } else {
      // console.log('Right text ' + text);
      console.log('------------------------------------------')
    }

  } else {console.log('Not ' + text +'   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
  console.log('-------------------------------------------')
  }
}






async function equallyXpathValue (page, xpath, text, equally) {

const equallySelector = await page.$x(xpath);

  if(equallySelector != 0) {
    // console.log('Exist  '+ text + '  !!!!!!');

  let elementXpath = (await page.$x(xpath))[0];
  let textContent = await page.evaluate(el => el.value, elementXpath);
  // console.log(textContent);
  // assert.equal(textContent, equally);  
  console.log(text + '  = '+ textContent);

    if(textContent != equally) {
    // await page.screenshot({path: 'wrong_' + text + '.png'});
      console.log('Wrong!!!  Right text ' + text +' = '+ equally +'   ~~~~~~~~~~~~~~~~~~~');
      console.log('------------------------------------------')
    } else {
      // console.log('Right text ' + text);
      console.log('------------------------------------------')
    }

  } else {console.log('Not ' + text +'   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
  console.log('-------------------------------------------')
  }
}






async function equallyText (page, xpath, text, equally) {

const equallySelector = await page.$x(xpath);

  if(equallySelector != 0) {
    console.log('Exist  '+ text);

  let elementXpath = (await page.$x(xpath))[0];
  let textContent = await page.evaluate(el => el.innerText, elementXpath);
   // console.log(textContent);
  // assert.equal(textContent, equally);  
  console.log(text + '  = '+ textContent);
  console.log('------------------------------------------')
 
  } else {console.log('Not ' + text +'   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
  console.log('-------------------------------------------')
  }
}







async function quantConvert (page, fromvalut, tovalut, quantity) {

  await page.waitForTimeout(1000);
await fromortoConvert (page, 'To', tovalut);
  await page.waitForTimeout(1000);
await fromortoConvert (page, 'From', fromvalut);


  await page.waitForTimeout(1000);
  await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]/div/div[1]/form/div[1]/div[1]/div[2]/div[1]/div/input`);
const fromConvert = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div/div[1]/form/div[1]/div[1]/div[2]/div[1]/div/input`);
await fromConvert[0].type(``);


await elementArrowRight (page, `/html/body/div[1]/div/div[2]/div/div[1]/div/div[1]/form/div[1]/div[1]/div[2]/div[1]/div/input`);

await elementDelete (page, `/html/body/div[1]/div/div[2]/div/div[1]/div/div[1]/form/div[1]/div[1]/div[2]/div[1]/div/input`);

await fromConvert[0].type(quantity);

   await page.waitForTimeout(1000);
  await page.waitForXPath(`//button//*[text()="Exchange"]`);
const exchangeButton = await page.$x(`//button//*[text()="Exchange"]`);
await exchangeButton[0].click();

  console.log('Exchange ' + fromvalut +' convert '+ tovalut +' = '+  quantity +'   ////////////////////////');

  console.log('******************************************');

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Conversion']`, 'WallWidg', 'Conversion');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'WallWidg', quantity);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ fromvalut +`"]`, 'WallWidg VALUTA FROM', fromvalut);

  console.log('------------------------------------------');

await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Conversion']`, 'ConvWidg', 'Conversion');

await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'ConvWidg', quantity);

await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ fromvalut +`"]`, 'ConvWidg VALUTA FROM', fromvalut);
}








async function totgetConvert (page, fromvalut, tovalut, totget) {

  await page.waitForTimeout(1000);
await fromortoConvert (page, 'To', tovalut);
  await page.waitForTimeout(1000);
await fromortoConvert (page, 'From', fromvalut);

  await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[text()="`+ totget +`"]`);
const totalGet = await page.$x(`//span[text()="`+ totget +`"]`);
await totalGet[0].click();

  await page.waitForTimeout(1000);
  await page.waitForXPath(`//button//*[text()="Exchange"]`);
const exchangeButton = await page.$x(`//button//*[text()="Exchange"]`);
await exchangeButton[0].click();

  console.log('Exchange ' + fromvalut +' convert '+ tovalut + ' total get =  ' + totget +'   ////////////////////////');

  console.log('******************************************'); 

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Conversion']`, 'WallWidg', 'Conversion');

// await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'WallWidg', quantity);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ fromvalut +`"]`, 'WallWidg VALUTA FROM', fromvalut);

  console.log('------------------------------------------');

await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Conversion']`, 'ConvWidg', 'Conversion');

// await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'ConvWidg', quantity);

await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ fromvalut +`"]`, 'ConvWidg VALUTA FROM', fromvalut);
}








async function quantTransfer (page, valut, quantity) {

// await fromortoConvert (page, 'From', valut);

  await page.waitForXPath(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
const buttonValut = await page.$x(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
await buttonValut[0].click();

//   await page.waitForSelector(`button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)`);
// await page.click('button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)')

  await page.waitForXPath(`//button//span[text()="Transfer"]`);
const buttonTransfer = await page.$x(`//button//span[text()="Transfer"]`);
await buttonTransfer[0].click();

//   await page.waitForXPath(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
// const tabSend = await page.$x(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
// await tabSend[0].click();

  await page.waitForTimeout(1000);
  await page.waitForXPath(`//div[contains(@class,'dragZone')]//div[@inputmode='numeric']//input[@type='text']`);
const inputTransfer = await page.$x(`//div[contains(@class,'dragZone')]//div[@inputmode='numeric']//input[@type='text']`);
await inputTransfer[0].type(``);

await elementDelete (page, `//div[contains(@class,'dragZone')]//div[@inputmode='numeric']//input[@type='text']`);

await inputTransfer[0].type(quantity);

  await page.waitForTimeout(1000);

  await page.waitForXPath(`//span[@class='MuiButton-label' and text()="Send"]`);
const buttonSend = await page.$x(`//span[@class='MuiButton-label' and text()="Send"]`);
await buttonSend[0].click();

  console.log('Transfer wallets--subaccouts ' + valut +' = '+  quantity +'   ////////////////////////');

  console.log('******************************************');

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'WallWidg', 'Transfer');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'WallWidg', quantity);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'WallWidg VALUTA FROM', valut);

// await page.goto('https://bitboardexchange.com/subs');

  await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div`);
const subaccountsPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div');
await subaccountsPage[0].click();

  await page.waitForTimeout(3000);

const url = page.url();
  if (url.includes('subs')) {
  console.log('Success subaccouts page  !!!!!!!!!!!!');
  console.log('++++++++++++++++++++++++++++++++++++++');
  } else {
      console.log('Not subaccouts page  !!!');
  }

  await page.waitForXPath(`//button//*[text()="`+ valut +` trading account"]`);
const buttonTrading = await page.$x(`//button//*[text()="`+ valut +` trading account"]`);
await buttonTrading[0].click();

  await page.waitForTimeout(12000);

// await equallyXpathInnerText (page, `//div[contains(@class,'MuiBox-root')][1]//div[1]/div[2]/div[2]/div[1]`, 'Fact amount subaccouts', quantity);
// await equallyXpathInnerText (page, `//div[contains(@class,'MuiBox-root')][1]//div[contains(@class,'MuiBox-root')][1]//*[text()="`+ quantity +`"]`, 'Fact amount subaccouts', quantity+' '+'\n\n'+valut);
await equallyXpathInnerText (page, `//div[contains(@class,'MuiBox-root')][1]//div[contains(@class,'MuiBox-root')][1]//*[text()="`+ quantity +`"]`, 'Fact amount subaccouts', quantity);

  await page.waitForXPath(`//button//span[text()="Transfers"]`);
const buttonTransfers = await page.$x(`//button//span[text()="Transfers"]`);
await buttonTransfers[0].click();

  await page.waitForTimeout(1000);

  console.log('Subaccouts history wallets--subaccouts  ////////////////////////');

  console.log('******************************************');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'Transfers subaccouts', 'Transfer');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'Transfers subaccouts', quantity);

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'Transfers subaccouts VALUTA FROM', valut);

 //       await page.waitForSelector(`button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)`);
 // await page.click('button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)')

  await page.waitForXPath(`//button//span[text()="Transfer"]`);
const buttonTransfer2 = await page.$x(`//button//span[text()="Transfer"]`);
await buttonTransfer2[0].click();

  await page.waitForXPath(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
const tabSend2 = await page.$x(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
await tabSend2[0].click();

  await page.waitForTimeout(1000);

  await page.waitForXPath(`//span[@class='MuiButton-label' and text()="Send"]`);
const buttonSend2 = await page.$x(`//span[@class='MuiButton-label' and text()="Send"]`);
await buttonSend2[0].click();

  console.log('Transfer subaccouts--wallets ' + valut +' = '+  quantity +'   ////////////////////////');

  console.log('******************************************');

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'Transfers subaccouts', 'Transfer');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'Transfers subaccouts', quantity);

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'Transfers subaccouts VALUTA FROM', valut);

// await page.goto('https://bitboardexchange.com/wallets');

    await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]`);
const walletPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]');
await walletPage[0].click();

await page.waitForTimeout(3000);

const urlWall = page.url();
  if (urlWall.includes('wallets')) {
  console.log('Success wallets page  !!!!!!!!!!!!');
  console.log('++++++++++++++++++++++++++++++++++++++');

  } else {
      console.log('Not wallets page  !!!');
  }

  await page.waitForXPath(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
const buttonValut2 = await page.$x(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
await buttonValut2[0].click();

await page.waitForTimeout(1000);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'WallWidg', 'Transfer');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'WallWidg', quantity);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'WallWidg VALUTA FROM', valut);

}







async function quantTransferSub (page, valut, quantity) {

  await page.waitForXPath(`//div[@inputmode="numeric"]//input[@type='text']`);
const inputTransfer = await page.$x(`//div[@inputmode="numeric"]//input[@type='text']`);
await inputTransfer[0].type('');

await elementDelete (page, `//div[@inputmode="numeric"]//input[@type='text']`);

await inputTransfer[0].type(quantity);

  await page.waitForXPath(`//span[@class='MuiButton-label' and text()="Send"]`);
const buttonSend2 = await page.$x(`//span[@class='MuiButton-label' and text()="Send"]`);
await buttonSend2[0].click();

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');

//   await page.waitForTimeout(3000);

//   await page.waitForXPath(`/html/body/div[1]/div[2]/div[2]/div/div/div[1]/div/div[1]/div[2]/div[2]/div/div/div/div[1]`);
// const leftMonth = await page.$x(`/html/body/div[1]/div[2]/div[2]/div/div/div[1]/div/div[1]/div[2]/div[2]/div/div/div/div[1]`);
// await leftMonth[0].click();
//   await page.waitForTimeout(1000);
//   await page.waitForXPath(`/html/body/div[1]/div[2]/div[2]/div/div/div[1]/div/div[1]/div[2]/div[2]/div/div/div/div[2]`);
// const rightMonth = await page.$x(`/html/body/div[1]/div[2]/div[2]/div/div/div[1]/div/div[1]/div[2]/div[2]/div/div/div/div[2]`);
// await rightMonth[0].click();
//   await page.waitForTimeout(1000);
// /html/body/div[1]/div[2]/div[2]/div/div/div[1]/div/div[1]/div[2]/div[2]/div/div/div/div[1]/svg/path
// <svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 15 15" aria-hidden="true" width="15" height="15" style="font-size: 15px; stroke: rgb(1, 28, 77); fill: none; cursor: pointer;"><path d="M10 2.5L5 7.5L10 12.5" stroke-width="2"></path></svg>
// <svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 15 15" aria-hidden="true" width="15" height="15" fill="none" style="font-size: 15px; stroke: rgb(1, 28, 77); fill: none; cursor: pointer;"><path d="M5 12.5L10 7.5L5 2.5" stroke="#011C4D" stroke-width="2"></path></svg>
  await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'Transfers subaccouts', 'Transfer');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='`+ quantity +`']`, 'Transfers subaccouts', quantity);

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'Transfers subaccouts VALUTA FROM', valut);

    await page.waitForTimeout(4000);
}








async function totgetTransfer (page, valut, totget) {

// await fromortoConvert (page, 'From', valut);

  await page.waitForXPath(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
const buttonValut = await page.$x(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
await buttonValut[0].click();

//       await page.waitForSelector(`button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)`);
// await page.click('button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)')

  await page.waitForXPath(`//button//span[text()="Transfer"]`);
const buttonTransfer = await page.$x(`//button//span[text()="Transfer"]`);
await buttonTransfer[0].click();

//   await page.waitForXPath(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
// const tabSend = await page.$x(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
// await tabSend[0].click();

  await page.waitForTimeout(1000);
  await page.waitForXPath(`//*[contains(@class,'dragZone')]//span[text()="`+ totget +`"]`);
const totalGet = await page.$x(`//*[contains(@class,'dragZone')]//span[text()="`+ totget +`"]`);
await totalGet[0].click();

  await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[@class='MuiButton-label' and text()="Send"]`);
const buttonSend = await page.$x(`//span[@class='MuiButton-label' and text()="Send"]`);
await buttonSend[0].click();

  console.log('Transfer wallets--subaccouts ' + valut +' = '+  totget +'   ////////////////////////');

  console.log('******************************************');

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'WallWidg', 'Transfer');

// await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'WallWidg', quantity);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'WallWidg VALUTA FROM', valut);

// await page.goto('https://bitboardexchange.com/subs');

  await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div`);
const subaccountsPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div');
await subaccountsPage[0].click();

await page.waitForTimeout(3000);

const url = page.url();
  if (url.includes('subs')) {
  console.log('Success subaccouts page  !!!!!!!!!!!!');
  console.log('++++++++++++++++++++++++++++++++++++++');
  } else {
      console.log('Not subaccouts page  !!!');
  }

await equallyText (page, `//*[text()="`+ valut +`"]`, 'amount subaccouts', totget+' '+valut);

  await page.waitForXPath(`//button//*[text()="`+ valut +` trading account"]`);
const buttonTrading = await page.$x(`//button//*[text()="`+ valut +` trading account"]`);
await buttonTrading[0].click(`//button//*[text()="`+ valut +` trading account"]`);

  await page.waitForXPath(`//button//span[text()="Transfers"]`);
const buttonTransfers = await page.$x(`//button//span[text()="Transfers"]`);
await buttonTransfers[0].click();

  console.log('Subaccouts history wallets--subaccouts  ////////////////////////');

  console.log('******************************************');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'Transfers subaccouts', 'Transfer');

// await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'Transfers subaccouts', quantity);

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'Transfers subaccouts VALUTA FROM', valut);

//   await page.waitForSelector(`button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)`);
// await page.click('button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)')

  await page.waitForXPath(`//button//span[text()="Transfer"]`);
const buttonTransfer2 = await page.$x(`//button//span[text()="Transfer"]`);
await buttonTransfer2[0].click();

  await page.waitForXPath(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
const tabSend2 = await page.$x(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
await tabSend2[0].click();

  await page.waitForTimeout(1000);

  await page.waitForXPath(`//span[@class='MuiButton-label' and text()="Send"]`);
const buttonSend2 = await page.$x(`//span[@class='MuiButton-label' and text()="Send"]`);
await buttonSend2[0].click();

  console.log('Transfer wallets--subaccouts ' + valut +' = '+  totget +'   ////////////////////////');

  console.log('******************************************');

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'Transfers subaccouts', 'Transfer');

// await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'Transfers subaccouts', quantity);

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'Transfers subaccouts VALUTA FROM', valut);

// await page.goto('https://bitboardexchange.com/wallets');

    await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]`);
const walletPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]');
await walletPage[0].click();

  await page.waitForTimeout(3000);

const urlWall = page.url();
  if (urlWall.includes('wallets')) {
  console.log('Success wallets page  !!!!!!!!!!!!');
  console.log('++++++++++++++++++++++++++++++++++++++');

  } else {
      console.log('Not wallets page  !!!');
  }

  await page.waitForXPath(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
const buttonValut2 = await page.$x(`//button//*[text()="`+ valut +`" and text()="Wallet"]`);
await buttonValut2[0].click();  

  await page.waitForTimeout(2000);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'WallWidg', 'Transfer');

// await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ quantity +`"]`, 'WallWidg', quantity);

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="`+ valut +`"]`, 'WallWidg VALUTA FROM', valut);

}






async function fromortoConvert (page, fromorto, valut) {

    await page.waitForSelector(`#convert`+ fromorto);
await page.click(`#convert`+ fromorto);

  await page.waitForXPath(`//*[text()="`+ valut +`" and contains(@class,'MuiButtonBase-root MuiListItem-root MuiMenuItem-root')]`);
const converTo = await page.$x(`//*[text()="`+ valut +`" and contains(@class,'MuiButtonBase-root MuiListItem-root MuiMenuItem-root')]`);
await converTo[0].click(); 

}









async function limitOrder (page, BS, porfolio, price, quantity, text, equal, instrument) {

    await page.waitForXPath(`//button//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`-ZZ"]`);
const instrumentsButton = await page.$x(`//button//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`-ZZ"]`);
await instrumentsButton[0].click();

// buttonType в BS
     await page.waitForSelector(`#mui-component-select-order`);
 await page.click(`#mui-component-select-order`);

    await page.waitForXPath(`//li[text()="Limit"]`);
 const buttonType = await page.$x(`//li[text()="Limit"]`);
await buttonType[0].click();

    await page.waitForXPath(`//*[contains(@class,'widgetDragZone')]//input[@id="customized-search-field"]`);
const inputQuantity = await page.$x(`//*[contains(@class,'widgetDragZone')]//input[@id="customized-search-field"]`);
await inputQuantity[0].type('');

await elementDelete (page, `//*[contains(@class,'widgetDragZone')]//input[@id="customized-search-field"]`);

await inputQuantity[0].type(quantity);

     await page.waitForTimeout(1000);

      // let twoDelete = (await page.$x(`//*[contains(@class,'widgetDragZone')]//div[contains(@class,'MuiInput-underline MuiInputBase-formControl MuiInput-formControl')]//input[contains(@class,'MuiInputBase-input MuiInput-input')]`))[0];
      // let twoElement = await page.evaluate(el => el.value, twoDelete);

      // if (twoElement.length != 0) {

      //     await page.waitForXPath(`//*[contains(@class,'widgetDragZone')]//div[contains(@class,'MuiInputBase-formControl MuiInput-formControl')]//input[contains(@class,'MuiInputBase-input MuiInput-input')]`);
      // const inputPrice = await page.$x(`//*[contains(@class,'widgetDragZone')]//div[contains(@class,'MuiInputBase-formControl MuiInput-formControl')]//input[contains(@class,'MuiInputBase-input MuiInput-input')]`);
      // await inputPrice[0].type('');

      //     for (let i = 0; i < twoElement.length; i++) {
      //     await page.keyboard.press('Backspace');
      //     } 

      // } else {
      
      // }

//     await page.waitForXPath(`//*[contains(@class,'widgetDragZone')]//div[contains(@class,'MuiInputBase-formControl MuiInput-formControl')]//input[contains(@class,'MuiInputBase-input MuiInput-input')]`);
// const inputPrice = await page.$x(`//*[contains(@class,'widgetDragZone')]//div[contains(@class,'MuiInputBase-formControl MuiInput-formControl')]//input[contains(@class,'MuiInputBase-input MuiInput-input')]`);
// await inputPrice[0].type(price);


    await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div[1]/div[2]/div[2]/div[2]/div/div/div[`+ price +`]/button//span[@class="MuiButton-label"]`);
const inputPrice = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div/div/div/div/div/div[2]/div/div[1]/div[2]/div[2]/div[2]/div/div/div[`+ price +`]/button//span[@class="MuiButton-label"]`);
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();
await inputPrice[0].click();



    await page.waitForXPath(`//button//*[text()="`+ BS +`"]`);
const buttonBS = await page.$x(`//button//*[text()="`+ BS +`"]`);
await buttonBS[0].click();

const placeOrder = await page.$x('//div[text()="Place order"]');
    
if (placeOrder.length != 0) {

        await page.waitForTimeout(1000);

//         await page.waitForXPath(`//*[contains(@class,'MuiDialogContent-root')]//div[contains(@class,'MuiInputBase-formControl MuiInput-formControl')]//input[contains(@class,'MuiInputBase-input MuiInput-input')]`);
// const inputPrice = await page.$x(`//*[contains(@class,'MuiDialogContent-root')]//div[contains(@class,'MuiInputBase-formControl MuiInput-formControl')]//input[contains(@class,'MuiInputBase-input MuiInput-input')]`);
// await inputPrice[0].type(price);

    await page.waitForXPath(`//*[contains(@class,'MuiDialogContent-root')]//button//*[text()="`+ BS +`"]`);
const buttonTypeWidget = await page.$x(`//*[contains(@class,'MuiDialogContent-root')]//button//*[text()="`+ BS +`"]`);
await buttonTypeWidget[0].click();
} else {

}

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="success"]`, 'Text appeared snackbar', 'success');

const showMoreExist = await page.$x(`//div[text()="Show more"]`);

  if (showMoreExist.length != 0) {

      await page.waitForXPath(`//div[text()="Show more"]`);
  const showMore = await page.$x(`//div[text()="Show more"]`);
  await showMore[0].click();

      await page.waitForTimeout(1000);
  } else {

  }

await equallyXpathInnerText (page, `//*[contains(@class,'MuiTableRow-root')][2]//td[contains(@class,'MuiTableCell-root MuiTableCell-body')][2]`, 'Instrument BS', instrument +'-ZZ');

await equallyXpathInnerText (page, `//*[contains(@class,'MuiTableRow-root')][2]//td[contains(@class,'MuiTableCell-root MuiTableCell-body')][5]`, 'BS QTI', quantity);

// await equallyXpathInnerText (page, `//*[contains(@class,'MuiTableRow-root')][2]//td[contains(@class,'MuiTableCell-root MuiTableCell-body')][4]`, 'BS Price', price);

    await page.waitForXPath(`//div[text()="Hide"]`);
const showMore = await page.$x(`//div[text()="Hide"]`);
await showMore[0].click();

  await page.waitForTimeout(2000);

  const emptyPortfolio = await page.$x(`//p[text()="There is nothing"]`);
      
  if (emptyPortfolio.length != 0) {

  await equallyText (page, `//p[text()="There is nothing"]`, 'empty portfolio', 'There is nothing');
  } else {

    const totalInstrument = await page.$x(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
        
    if (totalInstrument.length != 0) {

        await page.waitForXPath(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
    const portfTotal = await page.$x(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
    await portfTotal[0].click();

        await page.waitForTimeout(4000);

    await equallyXpathInnerText (page, `//*[@class="rendering-zone"]//div[@data-field="contract_symbol"]`, 'Contract portfolio limit', instrument +'-ZZ');

    await equallyXpathInnerText (page, `//*[@class="rendering-zone"]//div[@data-field="`+ porfolio +`_quantity"]`, text, equal);

    } else {

        console.log('No total '+ instrument);
    }

  }

}










async function marketOrder (page, BS, porfolio, quantity, text, equal, instrument) {

    await page.waitForXPath(`//button//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`-ZZ"]`);
const instrumentsButton = await page.$x(`//button//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`-ZZ"]`);
await instrumentsButton[0].click();

// buttonType в BS
     await page.waitForSelector(`#mui-component-select-order`);
 await page.click(`#mui-component-select-order`);

     await page.waitForTimeout(1000);

    await page.waitForXPath(`//li[text()="Market"]`);
 const buttonType = await page.$x(`//li[text()="Market"]`);
await buttonType[0].click();

    await page.waitForXPath(`//*[contains(@class,'widgetDragZone')]//input[@id="customized-search-field"]`);
const inputQuantity = await page.$x(`//*[contains(@class,'widgetDragZone')]//input[@id="customized-search-field"]`);
await inputQuantity[0].type('');

await elementDelete (page, `//*[contains(@class,'widgetDragZone')]//input[@id="customized-search-field"]`);

await inputQuantity[0].type(quantity);

     await page.waitForTimeout(1000);

    await page.waitForXPath(`//button//*[text()="`+ BS +`"]`);
const buttonBS = await page.$x(`//button//*[text()="`+ BS +`"]`);
await buttonBS[0].click();

    const placeOrder = await page.$x('//div[text()="Place order"]');
        
    if (placeOrder.length != 0) {

        await page.waitForTimeout(1000);

        await page.waitForXPath(`//*[contains(@class,'MuiDialogContent-root')]//button//*[text()="`+ BS +`"]`);
    const buttonTypeWidget = await page.$x(`//*[contains(@class,'MuiDialogContent-root')]//button//*[text()="`+ BS +`"]`);
    await buttonTypeWidget[0].click();
    } else {

    }

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="success"]`, 'Text appeared snackbar', 'success');

  await page.waitForTimeout(2000);

  const emptyPortfolio = await page.$x(`//p[text()="There is nothing"]`);
 
  if (emptyPortfolio.length != 0) {

  await equallyText (page, `//p[text()="There is nothing"]`, 'empty portfolio', 'There is nothing');
  } else {

    const totalInstrument = await page.$x(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
        
    if (totalInstrument.length != 0) {

        await page.waitForXPath(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
    const portfTotal = await page.$x(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
    await portfTotal[0].click();

        await page.waitForTimeout(4000);

    await equallyXpathInnerText (page, `//*[@class="rendering-zone"]//div[@data-field="contract_symbol"]`, 'Contract porfolio market', instrument +'-ZZ');

    await equallyXpathInnerText (page, `//*[@class="rendering-zone"]//div[@data-field="quantity"]`, text, equal);

    } else {

        console.log('No total '+ instrument);
    }
  }
}









async function deleteLimOrder (page,  porfolio, text, equal, instrument) {

    const showMoreExist = await page.$x(`//div[text()="Show more"]`);
        
    if (showMoreExist.length != 0) {

        await page.waitForXPath(`//div[text()="Show more"]`);
    const showMore = await page.$x(`//div[text()="Show more"]`);
    await showMore[0].click();

        await page.waitForTimeout(1000);
    } else {
    }

// await equallyXpathInnerText (page, `//td[contains(@class,'MuiTableCell-root MuiTableCell-body')][2]`, 'Instrument BS limit delete', instrument +'-ZZ');
//*[contains(@class,'fullViewContent')]//*[contains(@class,'MuiTable-root')]//*[contains(@class,'MuiTableRow-root')][2]//*[contains(@class,'MuiSvgIcon-root')]
//*[contains(@class,'fullViewContent')]//*[contains(@class,'MuiTable-root')]//*[contains(@class,'MuiSvgIcon-root')]
    await page.waitForXPath(`//*[contains(@class,'fullViewContent')]//*[contains(@class,'MuiTable-root')]//*[contains(@class,'MuiSvgIcon-root')]`);
const deletOrder = await page.$x(`//*[contains(@class,'fullViewContent')]//*[contains(@class,'MuiTable-root')]//*[contains(@class,'MuiSvgIcon-root')]`);
await deletOrder[0].click();

    await page.waitForXPath(`//span[text()="Cancel Order"]`);
const cancelOrder = await page.$x(`//span[text()="Cancel Order"]`);
await cancelOrder[0].click();

  console.log('BS limit delete');

    await page.waitForTimeout(1000);

    await page.waitForXPath(`//div[text()="Hide"]`);
const showHide = await page.$x(`//div[text()="Hide"]`);
await showHide[0].click();

    await page.waitForTimeout(1000);

  const emptyPortfolio = await page.$x(`//p[text()="There is nothing"]`);
      
      // console.log(emptyPortfolio);

  if (emptyPortfolio.length != 0) {
      // console.log('Success !=0');

  await equallyText (page, `//p[text()="There is nothing"]`, 'empty portfolio', 'There is nothing');
  } else {

    const totalInstrument = await page.$x(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
        
        // console.log(totalInstrument);

    if (totalInstrument.length != 0) {

        await page.waitForXPath(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
    const portfTotal = await page.$x(`//li[contains(@class,'MuiListItem-root')]//p[contains(@class,'MuiTypography-root') and text()="`+ instrument +`"]`);
    await portfTotal[0].click();

        await page.waitForTimeout(4000);

    await equallyXpathInnerText (page, `//*[@class="rendering-zone"]//div[@data-field="contract_symbol"]`, 'Contract portfolio limit delete', instrument +'-ZZ');

    await equallyXpathInnerText (page, `//*[@class="rendering-zone"]//div[@data-field="`+ porfolio +`_quantity"]`, text, equal);

    } else {

        console.log('No total '+ instrument);
    }

  }

}







async function choiceSubaccount (page, account) {

// выбор субаккант
 //     await page.waitForSelector(`.MuiInputBase-input.MuiInputBase-inputAdornedEnd`);
 // await page.click(`.MuiInputBase-input.MuiInputBase-inputAdornedEnd`);

    await page.waitForXPath(`//button//*[text()="`+ account +`"]`);
const subAccount = await page.$x(`//button//*[text()="`+ account +`"]`);
await subAccount[0].click();

  console.log('Success "'+ account +'" account!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');
}






async function addKluch (page, nameKey, subaccount, access, ACCESS) {

await page.type(`input[name="name"]`, nameKey);
    await page.waitForTimeout(1000);  
//Subaccount
    await page.waitForSelector(`#mui-component-select-account_guid`);
await page.click(`#mui-component-select-account_guid`);
    await page.waitForTimeout(1000);
const eth = await page.$x(`//li[text()="`+ subaccount +`"]`);
await eth[0].click();
//Access
    await page.waitForTimeout(1000);
    await page.waitForSelector(`#mui-component-select-restriction`);
await page.click(`#mui-component-select-restriction`);
    await page.waitForTimeout(1000);
const all = await page.$x(`//li[text()="`+ access +`"]`);
await all[0].click();
    await page.waitForTimeout(1000);
const addKey = await page.$x(`//span[text()="Add key"]`);
await addKey[0].click();
    await page.waitForTimeout(2000);
await equallyXpathInnerText (page, `//div[@class="MuiDataGrid-cell MuiDataGrid-cellLeft"][2]`, 'Name key table', nameKey);
await equallyXpathInnerText (page, `//div[@class="MuiDataGrid-cell MuiDataGrid-cellLeft"][4]`, 'Access key table', ACCESS);
    console.log('Success add key   =   ' + nameKey + '    !!!!!!!!!!');
    console.log('//////////////////////////////////////////');
}





async function addSubaccount (page, nameSubDes, valut) {

  await page.waitForXPath(`//button//div[text()="Add a new one"]`);
const addNewSub = await page.$x(`//button//div[text()="Add a new one"]`);
await addNewSub[0].click();
   await page.waitForTimeout(1000);
//Name
    await page.waitForSelector(`input[name="name"]`);
await page.type(`input[name="name"]`, nameSubDes);
   await page.waitForTimeout(1000);
//Currency
    await page.waitForSelector(`div#mui-component-select-currency`);
await page.click(`div#mui-component-select-currency`);
   await page.waitForTimeout(1000);
  await page.waitForXPath(`//li[text()="`+ valut +`"]`);
const selVal = await page.$x(`//li[text()="`+ valut +`"]`);
await selVal[0].click();
   await page.waitForTimeout(1000);
//Description
    await page.waitForSelector(`textarea[name="description"]`);
await page.type(`textarea[name="description"]`, nameSubDes);
   await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[text()="Add"]`);
const addSub = await page.$x(`//span[text()="Add"]`);
await addSub[0].click();
   await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[text()="Confirm"]`);
const butConf = await page.$x(`//span[text()="Confirm"]`);
await butConf[0].click();

  await page.waitForTimeout(3000);
  console.log('------------------------------------------');
await equallyXpathInnerText (page, `//*[text()="Success"]`, 'Text appeared snackbar', 'Success');
await equallyXpathInnerText (page, `//div[contains(@class,'MuiCardContent-root')]//li[contains(@class,'MuiListItem-root')][last()-1]//button/div[1]/div[2]/div[1]`, 'Name last sub', nameSubDes);
await equallyXpathInnerText (page, `//div[contains(@class,'MuiCardContent-root')]//li[contains(@class,'MuiListItem-root')][last()-1]//button/div[2]`, 'Name last description', nameSubDes);
// await equallyXpathInnerText (page, `//div[contains(@class,'MuiCardContent-root')]//li[contains(@class,'MuiListItem-root')][last()-1]//button/div[1]/div[2]/div[2]/text()[2]`, 'Valut sub', valut);
}




async function udalitApiFirst (page) {
const delApiFirst = await page.$x(`//div[@class="MuiDataGrid-row Mui-even"][1]//button[@class="MuiButtonBase-root MuiIconButton-root MuiIconButton-sizeSmall"]`);
await delApiFirst[0].click();
}




async function deletePortfolio (page) {
  await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[3]/div[6]/div/div/div[1]/div[2]/div[2]/div[3]/div//*[contains(@class,'MuiSvgIcon-root ')]//*[@clip-rule="evenodd" and @fill-rule="evenodd"]`);
const deletPortf = await page.$x(`/html/body/div[1]/div/div[2]/div/div[3]/div[6]/div/div/div[1]/div[2]/div[2]/div[3]/div//*[contains(@class,'MuiSvgIcon-root ')]//*[@clip-rule="evenodd" and @fill-rule="evenodd"]`);
await deletPortf[0].click();

  await page.waitForXPath(`//span[text()='Close portfolio']`);
const closePortf = await page.$x(`//span[text()='Close portfolio']`);
await closePortf[0].click();

  await page.waitForTimeout(2000);

  await page.waitForXPath(`//button//span[text()='Confirm']`);
const configPortfDel = await page.$x(`//button//span[text()='Confirm']`);
await configPortfDel[0].click();

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success"]`, 'Text appeared snackbar', 'Success');

  await page.waitForTimeout(2000);

  const emptyPortfolio = await page.$x(`//p[text()="There is nothing"]`);
 
  if (emptyPortfolio.length != 0) {

  await equallyText (page, `//p[text()="There is nothing"]`, 'empty portfolio', 'There is nothing');
  } else {
        console.log('Not empty portfolio');
  }
}






async function enLangvuage (page) {
const startLanguage = await page.$x(`//div[contains(@class,'MuiBox-root') and text()='RU']`);
        
if (startLanguage.length != 0) {
        await page.waitForXPath(`//div[contains(@class,'MuiBox-root') and text()='RU']`);
    const selectLanguage = await page.$x(`//div[contains(@class,'MuiBox-root') and text()='RU']`);
    await selectLanguage[0].click();
      console.log('Success switched EN language!');
      await page.waitForTimeout(2000);
} else {
}
}




async function sizeBrowser (page) {
await page.setViewport({
  width: 1366,
  height: 610,
  deviceScaleFactor: 1,
});
}





const quantRetries = 2;
const quantTimeout = 50000;





describe('Authentication', function() {
    let browser;

    // this.timeout(110000);

  before(async function() {
    this.timeout(0);
    browser = await puppeteer.launch({
       headless: false,
    // devtools: true,
      });
  });
  

  after(async function() {
    this.timeout(0);
    await browser.close();
  });




 
 
   it('Show wrong password registration!!!!!!!', function(done) {

(async () => {
  this.retries(quantRetries);
  // setTimeout(done, 15000);
     this.timeout(160000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

// await authorization (page, creds.name, creds.email);

    await page.waitForTimeout(7000);

    await enLangvuage (page);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Includes terminal!!!');
    await logOut(page);
  } else {
      console.log('Includes auth!!!');
  }

      await page.waitForTimeout(2000);
//  registration
 await page.click(`.btn-registration-show`);
//  name
    await page.waitForSelector(`input.registration-first-control`);
await page.type(`input.registration-first-control`, creds.name);

// start now  
    await page.waitForSelector(`.liKFcE:nth-of-type(5) button`);
await page.click(`.liKFcE:nth-of-type(5) button`);

await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][2]//div[@data-test='error']`, 'error email', 'Required field');
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][4]//div[@data-test='error']`, 'error "i read and agree"', 'The terms and conditions must be accepted');

// email
    await page.waitForSelector(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`);
await page.type(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`, creds.email);
// i read and agree
await page.click(`.liKFcE:nth-of-type(4) .MuiSvgIcon-root`);
// start now  
    await page.waitForSelector(`.liKFcE:nth-of-type(5) button`);
await page.click(`.liKFcE:nth-of-type(5) button`);
    
    console.log('Success registr login!');
// got it
    await page.waitForTimeout(2000);
    await page.waitForSelector(`button.btn-white`);
await page.click(`button.btn-white`);

    await page.waitForTimeout(2000);

await page.close();
const pages = await browser.pages();
const page2 = pages[pages.length - 1];

await emailProton (page2);

await page2.close();
const pages2 = await browser.pages();
const page3 = pages2[pages2.length - 1];  
 
    await page3.waitForTimeout(2000);
 
    await page3.waitForXPath(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/div/button/span[1]`);
const openEye = await page3.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/div/button/span[1]`);
await openEye[0].click();

await wrongPassword (page3, creds.passwordCaps, creds.passwordCaps, 'without Caps', 'At least 8 characters, capital letter, special character and number');

await wrongPassword (page3, creds.passwordAlpha, creds.passwordAlpha, 'without Alpha', 'At least 8 characters, capital letter, special character and number');

await wrongPassword (page3, creds.passwordInt, creds.passwordInt, 'without Int',  'At least 8 characters, capital letter, special character and number');

await wrongPassword (page3, creds.passwordCpec, creds.passwordCpec, 'without Cpec', 'At least 8 characters, capital letter, special character and number');

await wrongPassword (page3, creds.passwordLeast, creds.passwordLeast, 'without Least',  'At least 8 characters, capital letter, special character and number');

errorMessageSelector = `body > div > div > div.auth-wrap > div > section > div:nth-child(2) > form > div:nth-child(2) > div.sc-fzoLsD.liKFcE`

await wrongPassword (page3, creds.password, creds.passwordCpec, 'Notmatch', 'Passwords do not match');

await wrongPassword (page3, creds.password, '', 'Required field', 'Required field');

const firstPsw = await page3.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`);
await firstPsw[0].type(creds.password);

const confirmPsw = await page3.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[2]/div/div/input`);
await confirmPsw[0].type(creds.password);

await page3.click(`body > div > div > div.auth-wrap > div > section > div:nth-child(2) > form > div:nth-child(3) > button`);

    console.log('Success input password!');  

    await page3.waitForXPath(`/html/body/div/div/div[2]/div/section/div/p/a`);
const toSignIn = await page3.$x('/html/body/div/div/div[2]/div/section/div/p/a');
await toSignIn[0].click();

    await page3.waitForTimeout(6000);

  const url2 = page3.url();
  if (url2.includes('create')) {
    await page3.screenshot({path: 'not_auth.png'});
    console.log('Error create password!!!');
  } else {
  
    console.log('Success create password!!!');
  }

await page3.close();
      done();
    })();
  });

  



  it('Auth wrong input!!!!!!!', function(done) {

(async () => {
  this.retries(quantRetries);
  // setTimeout(done, 15000);
     this.timeout(40000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

    await page.waitForTimeout(2000);
        await page.waitForXPath(`//div[@class="auth-toggle-login active"]//button[@aria-label="toggle password visibility"]`);
const visibilityPassword = await page.$x(`//div[@class="auth-toggle-login active"]//button[@aria-label="toggle password visibility"]`);
await visibilityPassword[0].click();

    await page.waitForSelector(`input[name="email"]`);
await page.type(`input[name="email"]`, '');
await page.click(`.auth-form button[type="submit"]`);
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][1]//div[@data-test='error']`, 'error login', 'Required field');


await page.type(`input[name="password"]`, '');
await page.click(`.auth-form button[type="submit"]`);
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][2]//div[@data-test='error']`, 'error password', 'Required field');


await page.type(`input[name="email"]`, 'email');
await page.type(`input[name="password"]`, '1234');
await page.click(`.auth-form button[type="submit"]`);
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][1]//div[@data-test='error']`, 'error login', 'Invalid email');
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][2]//div[@data-test='error']`, 'error password', 'At least 5 characters and no more than 50');


await page.type(`input[name="password"]`, '5');
await page.click(`.auth-form button[type="submit"]`);
     await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][2]//div[@data-test='error']`, 'error password', 'Please fill in all fields');


await page.type(`input[name="email"]`, '@gmail.com');
await page.click(`.auth-form button[type="submit"]`);
     await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][2]//div[@data-test='error']`, 'error login', 'Wrong email or password');


await page.type(`input[name="email"]`, '');
await elementDelete (page, `//input[@name="email" and @type="email"]`);
await page.type(`input[name="email"]`, creds.email);
await page.click(`.auth-form button[type="submit"]`);
     await page.waitForTimeout(1000)
await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][2]//div[@data-test='error']`, 'error password', 'Wrong email or password');


await page.type(`input[name="password"]`, '');
await elementDelete (page, `//input[@name="password" and @type="text"]`);
await page.type(`input[name="password"]`, creds.password);
await page.click(`.auth-form button[type="submit"]`);

     await page.waitForTimeout(5000);

  const url = page.url();
  if (url.includes('terminal')) {
    console.log('Success login!');
         await page.waitForTimeout(2000);
    await profilPage(page); 
    await equallyXpathValue (page, `//input[@id="name"]`, 'Profile name', creds.name);
    await logOut (page);
  } else {
      console.log('Not login!!!');
  }

     await page.waitForTimeout(2000);

await page.close();
      done();
    })();
  });



 
  it('Registration exist email!!!!!!!', function(done) {

(async () => {
  this.retries(quantRetries);
  // setTimeout(done, 15000);
     this.timeout(15000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

// await authorization (page, creds.name, creds.email);

    await page.waitForTimeout(7000);

    await enLangvuage (page);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Includes terminal!!!');
    await logOut(page);
  } else {
      console.log('Includes auth!!!');
  }

      await page.waitForTimeout(2000);
//  registration
 await page.click(`.btn-registration-show`);
//  name
    await page.waitForSelector(`input.registration-first-control`);
await page.type(`input.registration-first-control`, creds.name);
// email
    await page.waitForSelector(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`);
await page.type(`input[class="MuiInputBase-input MuiInput-input form-control-big form-control_bottom-line control_white"]`, creds.email);
// i read and agree
await page.click(`.liKFcE:nth-of-type(4) .MuiSvgIcon-root`);
// start now  
    await page.waitForSelector(`.liKFcE:nth-of-type(5) button`);
await page.click(`.liKFcE:nth-of-type(5) button`);
    
     await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//*[text()="entity already exists: `+ creds.email +`"]`, 'Text appeared snackbar', 'entity already exists: '+ creds.email);

await page.close();
      done();
    })();
  });

  





  it('Registration 1 user!!!!!!!', function(done) {

(async () => {
     this.timeout(40000 + quantTimeout);



var data = JSON.stringify({"email":creds.email1,"broker":"HFTB","name":creds.name1});

var config = {
  method: 'put',
  url: 'https://api.bitboardexchange.com/v1/pub/invite',
  headers: { 
    'Content-Type': 'application/json', 
    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
  },
  data : data
};

axios(config)
.then(function (response) {

  var response1 = response.data;
console.log('#### First response:');
console.log(response1);
console.log(`#### First response debug_info: ${response1.debug_info}`);
console.log('Client invite!!!!!!!!!!!!!!!!!!!!!!!!');





  var data = '';

  var config = {
    method: 'put',
    url: 'https://api.bitboardexchange.com/v1/pub/client_claim_invite/'+ response1.debug_info,
    headers: { 
      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
    },
    data : data
  };

  axios(config)
  .then(function (response) {
  var response2 = response.data;
  console.log('#### Second response:');
  console.log(response2);
  console.log(`#### Second response access_token: ${response2.user.access_token}`);
  console.log('Client claim invite!!!!!!!!!!!!!!!!!!!!!!!!');





    var data = JSON.stringify({"password":creds.password1,"repeat_password":creds.password1});

    var config = {
      method: 'post',
      url: 'https://api.bitboardexchange.com/v1/user/new_password',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer ' + response2.user.access_token, 
        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
      },
      data : data
    };

    axios(config)
    .then(function (response) {
    var response3 = response.data;
    console.log('#### Third response:');
    console.log(response3);
    console.log('Client new password (registration)!!!!!!!!!!!!!!!!!!!!!!!!');




    })
    .catch(function (error) {
      console.log('#### ERROR in Third response');
      console.log(error);
    }); 


  })
  .catch(function (error) {
    console.log('#### ERROR in Second response');
    console.log(error);
  });


})
.catch(function (error) {
  console.log('#### ERROR in First response');
  console.log(error);
});




      done();
    })();
  });

  





  it('Copy referral code!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(50000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email1, creds.password1);
await profilPage(page);

    await page.waitForXPath(`//span[text()="Get invite Link Now"]`);
const getInvite = await page.$x(`//span[text()="Get invite Link Now"]`);
await getInvite[0].click();
    await page.waitForTimeout(1000);
    await page.waitForXPath(`//p[text()="Copy"]`);
const copyCod = await page.$x(`//p[text()="Copy"]`);
await copyCod[0].click();
await copyCod[0].click();
await copyCod[0].click();

    console.log('Success referral copy!');

await logOut(page);

await page.close();     
      done();   
    })();
  });






  it('Authentication with referral code!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(110000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authorizationRefferal (page, creds.name2, creds.email2);


await page.close();
const pages = await browser.pages();
const page2 = pages[pages.length - 1];


await emailProton (page2);

await page2.close();
const pages2 = await browser.pages();
const page3 = pages2[pages2.length - 1];  

  //first password
    await page3.waitForTimeout(2000);
    await page3.waitForSelector(`input.MuiInputBase-inputAdornedEnd`);
await page3.type(`input.MuiInputBase-inputAdornedEnd`, creds.password2);

  //confirm password
    await page3.waitForSelector(`input[class="MuiInputBase-input MuiInput-input"]`);
await page3.type(`input[class="MuiInputBase-input MuiInput-input"]`, creds.password2);


//     await page3.waitForTimeout(2000);
//     await page3.waitForXPath(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`);
// const firstPswNew = await page3.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`);
// await firstPswNew[0].type(creds.password2);

// const confirmPswNew = await page3.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[2]/div/div/input`);
// await confirmPswNew[0].type(creds.password2);

    //await page3.waitForSelector(`button.MuiButton-textPrimary`);
await page3.click(`button.MuiButton-textPrimary`);

    console.log('Success input password!');  

    await page3.waitForXPath(`/html/body/div/div/div[2]/div/section/div/p/a`);
const sinInNew = await page3.$x('/html/body/div/div/div[2]/div/section/div/p/a');
await sinInNew[0].click();

await page3.close();
      done();   
    })();
  });





  it('Login with referral code and show referral block!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(50000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email1, creds.password1);
await profilPage(page);

    await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[2]/div/ul/li[7]`);
const referralBlock = await page.$x('/html/body/div[1]/div/div[1]/div/div[2]/div/ul/li[7]');
await referralBlock[0].click();

//     await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/div/div`);
// const rollUpSubmenu = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/div/div');
// await rollUpSubmenu[0].click();

    await page.waitForTimeout(1500);
    await page.waitForXPath(`//*[text()="Payout History"]`);
const payHistory = await page.$x('//*[text()="Payout History"]');
await payHistory[0].click();

    console.log('Success referral block!');

    await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//div[@class="rendering-zone"]//div[1]//div[@data-field="registered_number"][1]`, 'Registered Referrals', '1');

    await page.waitForTimeout(1000);

// const tableReffer = '#referrals';
// const element = await page.$(tableReffer);
// await element.screenshot({path: 'referral.png'});

  await logOut(page);

await page.close();
      done();   
    })();
  });








  it('Registration 3 user!!!!!!!', function(done) {

(async () => {
     this.timeout(40000 + quantTimeout);



var data = JSON.stringify({"email":creds.email3,"broker":"HFTB","name":creds.name3});

var config = {
  method: 'put',
  url: 'https://api.bitboardexchange.com/v1/pub/invite',
  headers: { 
    'Content-Type': 'application/json', 
    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
  },
  data : data
};

axios(config)
.then(function (response) {

  var response1 = response.data;
console.log('#### First response:');
console.log(response1);
console.log(`#### First response debug_info: ${response1.debug_info}`);
console.log('Client invite!!!!!!!!!!!!!!!!!!!!!!!!');





  var data = '';

  var config = {
    method: 'put',
    url: 'https://api.bitboardexchange.com/v1/pub/client_claim_invite/'+ response1.debug_info,
    headers: { 
      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
    },
    data : data
  };

  axios(config)
  .then(function (response) {
  var response2 = response.data;
  console.log('#### Second response:');
  console.log(response2);
  console.log(`#### Second response access_token: ${response2.user.access_token}`);
  console.log('Client claim invite!!!!!!!!!!!!!!!!!!!!!!!!');





    var data = JSON.stringify({"password":creds.password3,"repeat_password":creds.password3});

    var config = {
      method: 'post',
      url: 'https://api.bitboardexchange.com/v1/user/new_password',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer ' + response2.user.access_token, 
        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
      },
      data : data
    };

    axios(config)
    .then(function (response) {
    var response3 = response.data;
    console.log('#### Third response:');
    console.log(response3);
    console.log('Client new password (registration)!!!!!!!!!!!!!!!!!!!!!!!!');




    })
    .catch(function (error) {
      console.log('#### ERROR in Third response');
      console.log(error);
    }); 


  })
  .catch(function (error) {
    console.log('#### ERROR in Second response');
    console.log(error);
  });


})
.catch(function (error) {
  console.log('#### ERROR in First response');
  console.log(error);
});




      done();
    })();
  });







  it('Change email !!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(120000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email3, creds.password3);
await profilPage(page);

    await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div/div[2]/div[3]/div[3]/button/span[1]`);
const changeEmail = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[1]/div/div[2]/div[3]/div[3]/button/span[1]`);
await changeEmail[0].click();

    await page.waitForXPath(`//*[@class="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"]//*[@name="password"]`);
const currentPassword = await page.$x(`//*[@class="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"]//*[@name="password"]`);
await currentPassword[0].type('');

const nextChange = await page.$x(`//*[@class="sc-fzoLsD isnNHr"]//*[@type="submit"]`);
await nextChange[0].click();

await equallyXpathInnerText (page, `//p[@class='MuiFormHelperText-root MuiFormHelperText-contained Mui-error']`, 'error current password', 'Enter your password');

const currentPassword2 = await page.$x(`//*[@class="MuiInputBase-root MuiOutlinedInput-root Mui-error Mui-error MuiInputBase-formControl"]//*[@name="password"]`);
await currentPassword2[0].type(creds.password3);

await page.type(`input[name="new_email"]`, creds.email3);

const nextChange2 = await page.$x(`//*[@class="sc-fzoLsD isnNHr"]//*[@type="submit"]`);
await nextChange2[0].click();

     await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//*[text()="entity already exists: `+ creds.email3 +`"]`, 'Text appeared snackbar', 'entity already exists: '+ creds.email3);

await page.type(`input[name="new_email"]`, '');
await elementDelete (page, `//input[@name="new_email"]`);

await page.type(`input[name="new_email"]`, creds.emailNew3);

const nextChange3 = await page.$x(`//*[@class="sc-fzoLsD isnNHr"]//*[@type="submit"]`);
await nextChange3[0].click();

    await page.waitForTimeout(2000);
const gotIt = await page.$x(`//*[@class="sc-fzoLsD isnNHr"]//*[@type="submit"]`);
await gotIt[0].click();

    console.log('Success gotIt change email!');

    await page.waitForTimeout(2000);
await page.close();
const pages = await browser.pages();
const page2 = pages[pages.length - 1];

await emailProton (page2); 

await page2.close();
const pages2 = await browser.pages();
const page3 = pages2[pages2.length - 1];

    await page3.waitForTimeout(1000);  
    await page3.waitForXPath('/html/body/div[2]/div[3]/div/div[1]/button/span[1]');
const wellDone = await page3.$x(`/html/body/div[2]/div[3]/div/div[1]/button/span[1]`);
await wellDone[0].click();

   console.log('Success WellDone!');

await page3.close();
       done();   
    })();
  });






  it('Login after change email !!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(45000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.emailNew3, creds.password3);

    await page.waitForTimeout(4000);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Success change new email!!!');
  } else {
      console.log('Not change email!!!');
  }

await logOut(page);

await page.close();
       done();   
    })();
  });






  it('Registration 4 user!!!!!!!', function(done) {

(async () => {
     this.timeout(40000 + quantTimeout);



var data = JSON.stringify({"email":creds.email4,"broker":"HFTB","name":creds.name4});

var config = {
  method: 'put',
  url: 'https://api.bitboardexchange.com/v1/pub/invite',
  headers: { 
    'Content-Type': 'application/json', 
    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
  },
  data : data
};

axios(config)
.then(function (response) {

  var response1 = response.data;
console.log('#### First response:');
console.log(response1);
console.log(`#### First response debug_info: ${response1.debug_info}`);
console.log('Client invite!!!!!!!!!!!!!!!!!!!!!!!!');





  var data = '';

  var config = {
    method: 'put',
    url: 'https://api.bitboardexchange.com/v1/pub/client_claim_invite/'+ response1.debug_info,
    headers: { 
      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
    },
    data : data
  };

  axios(config)
  .then(function (response) {
  var response2 = response.data;
  console.log('#### Second response:');
  console.log(response2);
  console.log(`#### Second response access_token: ${response2.user.access_token}`);
  console.log('Client claim invite!!!!!!!!!!!!!!!!!!!!!!!!');





    var data = JSON.stringify({"password":creds.password4,"repeat_password":creds.password4});

    var config = {
      method: 'post',
      url: 'https://api.bitboardexchange.com/v1/user/new_password',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer ' + response2.user.access_token, 
        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
      },
      data : data
    };

    axios(config)
    .then(function (response) {
    var response3 = response.data;
    console.log('#### Third response:');
    console.log(response3);
    console.log('Client new password (registration)!!!!!!!!!!!!!!!!!!!!!!!!');




    })
    .catch(function (error) {
      console.log('#### ERROR in Third response');
      console.log(error);
    }); 


  })
  .catch(function (error) {
    console.log('#### ERROR in Second response');
    console.log(error);
  });


})
.catch(function (error) {
  console.log('#### ERROR in First response');
  console.log(error);
});




      done();
    })();
  });







  it('Forgot your password!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(110000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

// forgot your password  
    await page.waitForSelector(`a.t-nowrap`);
await page.click(`a.t-nowrap`);

    console.log('Success forgot your password!');

    await page.waitForSelector(`input[name="email"]`);
await page.type(`input[name="email"]`, '');
await page.click(`button[type="submit"]`);
  await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][1]//div[@data-test='error']`, 'error email', 'Required field');

await page.type(`input[name="email"]`, 'email');
await page.click(`button[type="submit"]`);
  await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][1]//div[@data-test='error']`, 'error email', 'Invalid email');

// await page.type(`input[name="email"]`, '');
// await elementDelete (page, `//input[@name="email"]`);

await page.type(`input[name="email"]`, '@email.com');
await page.click(`button[type="submit"]`);
    await page.waitForTimeout(2000);
  await equallyXpathInnerText (page, `//div[@class='sc-fzoLsD liKFcE'][1]//div[@data-test='error']`, 'error email', 'entity not exists: email');

await page.type(`input[name="email"]`, '');
await elementDelete (page, `//input[@name="email"]`);

await page.type(`input[name="email"]`, creds.email4);
await page.click(`button[type="submit"]`);

// got it
    await page.waitForTimeout(2000);
    await page.waitForSelector(`button.btn-white`);
await page.click(`button.btn-white`);

    await page.waitForTimeout(2000);
await page.close();
const pages = await browser.pages();
const page2 = pages[pages.length - 1];

await emailProton (page2);

await page2.close();
const pages2 = await browser.pages();
const page3 = pages2[pages2.length - 1];  
 
    await page3.waitForTimeout(2000);

const firstPsw = await page3.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[1]/div/div/input`);
await firstPsw[0].type(creds.passwordFog4);

const confirmPsw = await page3.$x(`/html/body/div/div/div[2]/div/section/div[1]/form/div[2]/div/div/input`);
await confirmPsw[0].type(creds.passwordFog4);

await page3.click(`body > div > div > div.auth-wrap > div > section > div:nth-child(2) > form > div:nth-child(3) > button`);

    console.log('Success input password!');  

    await page3.waitForXPath(`/html/body/div/div/div[2]/div/section/div/p/a`);
const toSignIn = await page3.$x('/html/body/div/div/div[2]/div/section/div/p/a');
await toSignIn[0].click();

    await page3.waitForTimeout(6000);

  const url2 = page3.url();
  if (url2.includes('reset')) {
    await page3.screenshot({path: 'not_auth.png'});
    console.log('Error remember password!!!');
  } else {
  
    console.log('Success remember password!!!');
  }

await page3.close();
        done();   
    })();
  });








  it('Change password without totp!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(50000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email4, creds.passwordFog4);
await profilPage(page);

//     await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[1]/div/div/input`);
// const oldPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[1]/div/div/input`);
// await oldPassword[0].type(creds.password4);

// const newPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[2]/div/div/input`);
// await newPassword[0].type(creds.passwordNew4);

// const conPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[3]/div/div/input`);
// await conPassword[0].type(creds.passwordNew4);

// // const passwordTotp = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[4]/div/div/input`);
// // await passwordTotp[0].type('111111');

// const totpProcPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[4]/div/button`);
// await totpProcPassword[0].click();

    await page.waitForSelector(`input#old_password-input`);
await page.type(`input#old_password-input`, '');

await page.type(`input#new-password-input`, '');
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][1]//div[@data-test="error"]`, 'error old password', 'Required field');

await page.type(`input#repeat_password-input`, '');
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][2]//div[@data-test="error"]`, 'error new password', 'Required field');

await page.type(`input#old_password-input`, '1');
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][3]//div[@data-test="error"]`, 'error confirm password', 'Required field');
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][1]//div[@data-test="error"]`, 'error old password', 'At least 5 characters and no more than 50');

await page.type(`input#new-password-input`, '2');
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][2]//div[@data-test="error"]`, 'error new password', 'At least 8 characters, capital letter, special character and number');

await page.type(`input#repeat_password-input`, '3');
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][3]//div[@data-test="error"]`, 'error confirm password', 'Passwords do not match');
await elementDelete (page, `//input[@id="repeat_password-input"]`);

await page.type(`input#new-password-input`, '');
await elementDelete (page, `//input[@id="new-password-input"]`);

await page.type(`input#old_password-input`, '111111111');

await page.type(`input#new-password-input`, creds.passwordNew4);

await page.type(`input#repeat_password-input`, creds.passwordNew4);

const totpProcPassword = await page.$x(`//button//*[text()="Proceed"]`);
await totpProcPassword[0].click();
    await page.waitForTimeout(1000);
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][1]//div[@data-test="error"]`, 'error old password', 'Password mismatch');

await page.type(`input#old_password-input`, '');
await elementDelete (page, `//input[@id="old_password-input"]`);
await page.type(`input#old_password-input`, creds.passwordFog4);
await totpProcPassword[0].click();


    console.log('Success process change password without totp!');

    await page.waitForXPath(`//button//*[text()="Okay, let's go!"]`);
const totpRelog = await page.$x(`//button//*[text()="Okay, let's go!"]`);
await totpRelog[0].click();


    console.log('Success relog change password!');

await page.close();
        done();   
    })();
  });





  it('Login after change password without totp!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(45000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email4, creds.passwordNew4);

    await page.waitForTimeout(4000);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Success change password without totp!!!');
  } else {
      console.log('Not change password without totp!!!');
  }

await logOut(page);

await page.close();
       done();   
    })();
  });








  it('Registration 5 user!!!!!!!', function(done) {

(async () => {
     this.timeout(40000 + quantTimeout);



var data = JSON.stringify({"email":creds.email5,"broker":"HFTB","name":creds.name5});

var config = {
  method: 'put',
  url: 'https://api.bitboardexchange.com/v1/pub/invite',
  headers: { 
    'Content-Type': 'application/json', 
    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
  },
  data : data
};

axios(config)
.then(function (response) {

  var response1 = response.data;
console.log('#### First response:');
console.log(response1);
console.log(`#### First response debug_info: ${response1.debug_info}`);
console.log('Client invite!!!!!!!!!!!!!!!!!!!!!!!!');





  var data = '';

  var config = {
    method: 'put',
    url: 'https://api.bitboardexchange.com/v1/pub/client_claim_invite/'+ response1.debug_info,
    headers: { 
      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
    },
    data : data
  };

  axios(config)
  .then(function (response) {
  var response2 = response.data;
  console.log('#### Second response:');
  console.log(response2);
  console.log(`#### Second response access_token: ${response2.user.access_token}`);
  console.log('Client claim invite!!!!!!!!!!!!!!!!!!!!!!!!');





    var data = JSON.stringify({"password":creds.password5,"repeat_password":creds.password5});

    var config = {
      method: 'post',
      url: 'https://api.bitboardexchange.com/v1/user/new_password',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer ' + response2.user.access_token, 
        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
      },
      data : data
    };

    axios(config)
    .then(function (response) {
    var response3 = response.data;
    console.log('#### Third response:');
    console.log(response3);
    console.log('Client new password (registration)!!!!!!!!!!!!!!!!!!!!!!!!');




    })
    .catch(function (error) {
      console.log('#### ERROR in Third response');
      console.log(error);
    }); 


  })
  .catch(function (error) {
    console.log('#### ERROR in Second response');
    console.log(error);
  });


})
.catch(function (error) {
  console.log('#### ERROR in First response');
  console.log(error);
});




      done();
    })();
  });





  it('Enable TOTP !!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(45000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email5, creds.password5);
await profilPage(page);

const enableTotp = await page.$x(`//span[contains(text(),"TOTP")]`);
await enableTotp[0].click();

    await page.waitForTimeout(1000);
    await page.waitForSelector(`input[name="pin"]`);
await page.type(`input[name="pin"]`,'123456');

const butTotp = await page.$x(`//span[text()="Next"]`);
await butTotp[0].click();

  await page.waitForTimeout(2000);
await equallyXpathInnerText (page, `//div[text()="totp is invalid"]`, 'Error enable TOTP', 'totp is invalid');

await enableDisableTotp (page, 'enable');


await logOut(page);


await page.close();
      done();   
    })();
  });





  it('Login TOTP!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(40000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await page.waitForTimeout(10000);

    await enLangvuage (page);

const url = page.url();
  if (url.includes('terminal')) {
            console.log('Includes terminal!!!');
        await logOut(page);

           await page.waitForTimeout(2000);
          await page.waitForSelector(`input[name="email"]`);
      await page.type(`input[name="email"]`, creds.email5);
      await page.type(`input[name="password"]`, creds.password5);
      await page.click(`.auth-form button[type="submit"]`);

          await page.waitForXPath(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      const comeLogTotp = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      await comeLogTotp[0].type('987654');

      const totpNextCome = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[3]/button`);
      await totpNextCome[0].click();
        
        await page.waitForTimeout(2000);
      await equallyXpathInnerText (page, `//div[text()="totp is invalid"]`, 'Error login TOTP', 'totp is invalid');

      await page.click(`.auth-form button[type="submit"]`);

          await page.waitForTimeout(1000);
          await page.waitForXPath(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      // const comeLogTotp = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      await comeLogTotp[0].type('111111');

      // const totpNextCome = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[3]/button`);
      await totpNextCome[0].click();  
          console.log('Success login totp!');

          await page.waitForNavigation({timeout: 6000}); 
  } else {
            console.log('Includes auth!!!');
           await page.waitForTimeout(2000);
          await page.waitForSelector(`input[name="email"]`);
      await page.type(`input[name="email"]`, creds.email5);
      await page.type(`input[name="password"]`, creds.password5);
      await page.click(`.auth-form button[type="submit"]`);

          await page.waitForXPath(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      const comeLogTotp = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      await comeLogTotp[0].type('987654');

      const totpNextCome = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[3]/button`);
      await totpNextCome[0].click();
        
        await page.waitForTimeout(2000);
      await equallyXpathInnerText (page, `//div[text()="totp is invalid"]`, 'Error login TOTP', 'totp is invalid');

      await page.click(`.auth-form button[type="submit"]`);

          await page.waitForXPath(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      const comeLogTotpTwo = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[1]/div/div/input`);
      await comeLogTotpTwo[0].type('111111');

      const totpNextComeTwo = await page.$x(`/html/body/div[2]/div[3]/div/div[2]/div/form/div[3]/button`);
      await totpNextComeTwo[0].click();  
          console.log('Success login totp!');

          await page.waitForNavigation({timeout: 6000}); 
  }


const url2 = page.url();
  if (url2.includes('terminal')) {
      console.log('Success login with totp!!!');
  } else {
      console.log('Not login with totp!!!');
  }

await logOut(page);

await page.close();
      done();   
    })();
  });





  it('Change password with TOTP!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(40000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authTotpOrTerminal(page, creds.email5, creds.password5);
await profilPage(page);

//     await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[1]/div/div/input`);
// const oldPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[1]/div/div/input`);
// await oldPassword[0].type(creds.password5);

// const newPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[2]/div/div/input`);
// await newPassword[0].type(creds.passwordNew5);

// const conPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[3]/div/div/input`);
// await conPassword[0].type(creds.passwordNew5);

// const passwordTotp = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[4]/div/div/input`);
// await passwordTotp[0].type('111111');

// const totpProcPassword = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]/div[3]/div[2]/div[6]/div/div[1]/form/div[5]/div/button`);
// await totpProcPassword[0].click();


    await page.waitForSelector(`input#old_password-input`);
await page.type(`input#old_password-input`, creds.password5);

await page.type(`input#new-password-input`, creds.passwordNew5);

await page.type(`input#repeat_password-input`, creds.passwordNew5);

await page.type(`input#totp-code-input`, '');

const totpProcPassword = await page.$x(`//button//*[text()="Proceed"]`);
await totpProcPassword[0].click();
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"][4]//div[@data-test="error"]`, 'error totp', 'Required field');

await page.type(`input#totp-code-input`, 'qwertyQWERTY123456');
await totpProcPassword[0].click();

    await page.waitForTimeout(2000);
  await equallyXpathInnerText (page, `//div[text()="totp is invalid"]`, 'Error change password TOTP', 'totp is invalid');

await page.type(`input#totp-code-input`, '');
await elementDelete (page, `//input[@id='totp-code-input']`);

await page.type(`input#totp-code-input`, '111111');
await totpProcPassword[0].click();

    console.log('Success process change password!');

    await page.waitForXPath(`//button//*[text()="Okay, let's go!"]`);
const totpRelog = await page.$x(`//button//*[text()="Okay, let's go!"]`);
await totpRelog[0].click();

    console.log('Success relog change password!');

await page.close();
        done();   
    })();
  });





  it('Disable TOTP!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(45000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authTotpOrTerminal(page, creds.email5, creds.passwordNew5);
await profilPage(page);


const disableTotp = await page.$x(`//span[contains(text(),"TOTP")]`);
await disableTotp[0].click();

    await page.waitForTimeout(1000);
    await page.waitForSelector(`input[name="pin"]`);
await page.type(`input[name="pin"]`,'123123');

const butTotp = await page.$x(`//*[@type="submit" and @tabindex="0"]//following::button[2]`);
await butTotp[0].click();

  await page.waitForTimeout(2000);
await equallyXpathInnerText (page, `//div[text()="totp is invalid"]`, 'Error disable TOTP', 'totp is invalid');

await enableDisableTotp (page, 'disable');

await logOut(page);


await page.close();
        done();   
    })();
  });





  it('Login after disable totp !!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(45000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email5, creds.passwordNew5);

    await page.waitForTimeout(4000);

const url = page.url();
  if (url.includes('terminal')) {
      console.log('Success disable totp!!!');
  } else {
      console.log('Not disable totp!!!');
  }

await logOut(page);

await page.close();
       done();   
    })();
  });








  it('Registration 6 user!!!!!!!', function(done) {

(async () => {
     this.timeout(40000 + quantTimeout);



var data = JSON.stringify({"email":creds.email6,"broker":"HFTB","name":creds.name6});

var config = {
  method: 'put',
  url: 'https://api.bitboardexchange.com/v1/pub/invite',
  headers: { 
    'Content-Type': 'application/json', 
    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
  },
  data : data
};

axios(config)
.then(function (response) {

  var response1 = response.data;
console.log('#### First response:');
console.log(response1);
console.log(`#### First response debug_info: ${response1.debug_info}`);
console.log('Client invite!!!!!!!!!!!!!!!!!!!!!!!!');





  var data = '';

  var config = {
    method: 'put',
    url: 'https://api.bitboardexchange.com/v1/pub/client_claim_invite/'+ response1.debug_info,
    headers: { 
      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
    },
    data : data
  };

  axios(config)
  .then(function (response) {
  var response2 = response.data;
  console.log('#### Second response:');
  console.log(response2);
  console.log(`#### Second response access_token: ${response2.user.access_token}`);
  console.log('Client claim invite!!!!!!!!!!!!!!!!!!!!!!!!');





    var data = JSON.stringify({"password":creds.password6,"repeat_password":creds.password6});

    var config = {
      method: 'post',
      url: 'https://api.bitboardexchange.com/v1/user/new_password',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer ' + response2.user.access_token, 
        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
      },
      data : data
    };

    axios(config)
    .then(function (response) {
    var response3 = response.data;
    console.log('#### Third response:');
    console.log(response3);
    console.log('Client new password (registration)!!!!!!!!!!!!!!!!!!!!!!!!');




    })
    .catch(function (error) {
      console.log('#### ERROR in Third response');
      console.log(error);
    }); 


  })
  .catch(function (error) {
    console.log('#### ERROR in Second response');
    console.log(error);
  });


})
.catch(function (error) {
  console.log('#### ERROR in First response');
  console.log(error);
});




      done();
    })();
  });








  it('Add new key!!!!!!!', function(done) {

    (async () => {
    this.retries(quantRetries);
    this.timeout(360000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await authOrTerminal(page, creds.email6, creds.password6);
    // await page.waitForTimeout(3000);
await profilPage(page);

//Subaccount
    await page.waitForSelector(`#mui-component-select-account_guid`);
await page.click(`#mui-component-select-account_guid`);
    await page.waitForTimeout(1000);
const eth = await page.$x(`//li[text()="ETH trading account"]`);
await eth[0].click();
//Access
    await page.waitForTimeout(1000);
    await page.waitForSelector(`#mui-component-select-restriction`);
await page.click(`#mui-component-select-restriction`);
    await page.waitForTimeout(1000);
const all = await page.$x(`//li[text()="All"]`);
await all[0].click();
    await page.waitForTimeout(1000);
const addKey = await page.$x(`//span[text()="Add key"]`);
await addKey[0].click();
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"]//div[@data-test="error"]`, 'Name key error', 'Required field');
    await page.waitForTimeout(3000);

await addKluch (page, creds.name5, 'General', 'All', 'ALL');

await page.type(`input[name="name"]`, creds.name5);
    await page.waitForTimeout(1000);
await addKey[0].click();
    await page.waitForTimeout(1000);
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"]//div[@data-test="error"]`, 'Name key error', 'Entity already exists');
  await equallyXpathInnerText (page, `//*[text()="entity already exists: `+ creds.name5 +`"]`, 'Text appeared snackbar', 'entity already exists: '+ creds.name5);

  await page.waitForTimeout(2000);
const delKey = await page.$x(`//span[text()="Delete Key"]`);
await delKey[0].click();
    console.log('Success del key!');

  await page.waitForTimeout(1000);
  const dataKey = await page.$x(`//div[@data-field="date"]//*[text()="Date"]`); 
if (dataKey.length != 0) {
    console.log('Table key not empty!');
} else {
    console.log('Empty table key!');
}

await addKluch (page, creds.name5, 'General', 'Order', 'ORDER');

  await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div`);
const subaccountsPage = await page.$x(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div`);
await subaccountsPage[0].click();
    console.log('Success subaccouts page!');
    await page.waitForTimeout(1000);
  await page.waitForXPath(`//button//div[text()="Only 20"]`);
const addNewSub = await page.$x(`//button//div[text()="Only 20"]`);
await addNewSub[0].click();
   await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[text()="Add"]`);
const addSub = await page.$x(`//span[text()="Add"]`);
await addSub[0].click();
   await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//p[@class='MuiFormHelperText-root MuiFormHelperText-contained Mui-error']`, 'error unique name sub', 'Required field');

//Name
    await page.waitForSelector(`input[name="name"]`);
await page.type(`input[name="name"]`,'1');
   await page.waitForTimeout(1000);
await addSub[0].click();
   await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[text()="Cancel"]`);
const butCancel = await page.$x(`//span[text()="Cancel"]`);
await butCancel[0].click();
      console.log('Cancel add subaccount!!!');

   await page.waitForTimeout(1000);
await addSubaccount (page, '1', 'BTC');

   await page.waitForTimeout(1000);
  await page.waitForXPath(`//div[contains(@class,'MuiCardContent-root')]//li[contains(@class,'MuiListItem-root')][last()-1]//div[3]//*[contains(@class,'MuiSvgIcon-root')]`);
const selFavor = await page.$x(`//div[contains(@class,'MuiCardContent-root')]//li[contains(@class,'MuiListItem-root')][last()-1]//div[3]//*[contains(@class,'MuiSvgIcon-root')]`);
await selFavor[0].click();
   await page.waitForTimeout(1000);
await equallyXpathInnerText (page, `//div[contains(@class,'sc-AxhCb jYBRlH')]//button[contains(@class,'MuiButtonBase-root')][last()]/div/div/div`, 'Submenu new add subacc', '1');
   await page.waitForTimeout(1000);
await selFavor[0].click();
      console.log('Delete new subaccount submenu!!!');
      console.log('------------------------------------------');

await addNewSub[0].click();
   await page.waitForTimeout(1000);
//Name
    await page.waitForSelector(`input[name="name"]`);
await page.type(`input[name="name"]`,'1');
   await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[text()="Add"]`);
const addSub2 = await page.$x(`//span[text()="Add"]`);
await addSub2[0].click();
   await page.waitForTimeout(1000);
  await page.waitForXPath(`//span[text()="Confirm"]`);
const butConf = await page.$x(`//span[text()="Confirm"]`);
await butConf[0].click();
   await page.waitForTimeout(1000);            
await equallyXpathInnerText (page, `//*[text()="entity already exists: 1"]`, 'Text appeared snackbar', 'entity already exists: 1');

await addSubaccount (page, '2', 'ETH');
await addSubaccount (page, '3', 'USD');
await addSubaccount (page, '4', 'BTC');
await addSubaccount (page, '5', 'ETH');
await addSubaccount (page, '6', 'USD');
await addSubaccount (page, '7', 'BTC');
await addSubaccount (page, '8', 'ETH');
await addSubaccount (page, '9', 'USD');
await addSubaccount (page, '10', 'BTC');
await addSubaccount (page, '11', 'ETH');
await addSubaccount (page, '12', 'USD');
await addSubaccount (page, '13', 'BTC');
await addSubaccount (page, '14', 'ETH');
await addSubaccount (page, '15', 'USD');
await addSubaccount (page, '16', 'BTC');
await addSubaccount (page, '17', 'ETH');
await addSubaccount (page, '18', 'USD');
   await page.waitForTimeout(2000);
await equallyXpathInnerText (page, `//*[text()="entity max limit: 20"]`, 'Text appeared snackbar', 'entity max limit: 20');

  await page.waitForXPath(`//span[text()="API Connect"]`);
const apiConnect = await page.$x('//span[text()="API Connect"]');
await apiConnect[0].click();
    console.log('Success API Connect!');
    await page.waitForTimeout(1000);
  await equallyXpathInnerText (page, `//div[@class="MuiDataGrid-cell MuiDataGrid-cellLeft"][2]`, 'Name key table', creds.name5);
  await equallyXpathInnerText (page, `//div[@class="MuiDataGrid-cell MuiDataGrid-cellLeft"][4]`, 'Access key table', 'ORDER');

  await page.waitForXPath(`//button[@class="MuiButtonBase-root MuiIconButton-root MuiIconButton-sizeSmall"]`);
const delKeySub = await page.$x(`//button[@class="MuiButtonBase-root MuiIconButton-root MuiIconButton-sizeSmall"]`);
await delKeySub[0].click();
    console.log('Success del key!');
    
  await page.waitForTimeout(1000);
  const dataKeySub = await page.$x(`//div[@data-field="date"]//*[text()="Date"]`); 
if (dataKeySub.length != 0) {
    console.log('Table key not empty!');
} else {
    console.log('Empty table key!');
}

await addKluch (page, '1', 'General', 'Read only', 'READONLY');

await profilPage(page);

await equallyXpathInnerText (page, `//div[@class="MuiDataGrid-cell MuiDataGrid-cellLeft"][2]`, 'Name key table', '1');
await equallyXpathInnerText (page, `//div[@class="MuiDataGrid-cell MuiDataGrid-cellLeft"][4]`, 'Access key table', 'READONLY');

  await page.waitForXPath(`//div[@data-field="name" and @role="columnheader"]`);
const butSortKey = await page.$x(`//div[@data-field="name" and @role="columnheader"]`);
await butSortKey[0].click();
  await page.waitForTimeout(1000);
await butSortKey[0].click();

await addKluch (page, '2', 'BTC trading account', 'Order', 'ORDER');
await addKluch (page, '3', 'ETH trading account', 'All', 'ALL');
await addKluch (page, '4', 'USD trading account', 'Read only', 'READONLY');
await addKluch (page, '5', 'General', 'Order', 'ORDER');
await addKluch (page, '6', 'BTC trading account', 'All', 'ALL');
await addKluch (page, '7', 'ETH trading account', 'Read only', 'READONLY');
await addKluch (page, '8', 'USD trading account', 'Order', 'ORDER');
await addKluch (page, '9', 'General', 'All', 'ALL');
await addKluch (page, 'a', 'BTC trading account', 'Read only', 'READONLY');

await page.type(`input[name="name"]`, '11');
    await page.waitForTimeout(1000);
const addLimit = await page.$x(`//span[text()="Add key"]`);
await addLimit[0].click();
    await page.waitForTimeout(2000);
  await equallyXpathInnerText (page, `//*[text()="entity max limit: 10"]`, 'Text appeared snackbar', 'entity max limit: 10');
  await equallyXpathInnerText (page, `//div[@class="sc-fzoLsD liKFcE"]//div[@data-test="error"]`, 'Name key error', 'Entity max limit');

await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000);
await udalitApiFirst (page);
    await page.waitForTimeout(1000); 
await udalitApiFirst (page);

// await page.click(`button[class="MuiButtonBase-root MuiIconButton-root MuiIconButton-sizeSmall"]`);
//     await page.waitForTimeout(1500);

    console.log('Success del key!');
  await page.waitForTimeout(1000);
  const dataKey2 = await page.$x(`//div[@data-field="date"]//*[text()="Date"]`); 
if (dataKey2.length != 0) {
    console.log('Table key not empty!');
} else {
    console.log('Empty table key!');
}

await logOut(page);

    console.log('Success test!');
await page.close();
           done();   
    })();
  });









  it('Registration 7 user, deposite ETH and BTC, convert BTCUSD!!!!!!!', function(done) {

(async () => {
     this.timeout(40000 + quantTimeout);



var data = JSON.stringify({"email":creds.email7,"broker":"HFTB","name":creds.name7});

var config = {
  method: 'put',
  url: 'https://api.bitboardexchange.com/v1/pub/invite',
  headers: { 
    'Content-Type': 'application/json', 
    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
  },
  data : data
};

axios(config)
.then(function (response) {

  var response1 = response.data;
console.log('#### First response:');
console.log(response1);
console.log(`#### First response debug_info: ${response1.debug_info}`);
console.log('Client invite!!!!!!!!!!!!!!!!!!!!!!!!');





  var data = '';

  var config = {
    method: 'put',
    url: 'https://api.bitboardexchange.com/v1/pub/client_claim_invite/'+ response1.debug_info,
    headers: { 
      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
    },
    data : data
  };

  axios(config)
  .then(function (response) {
  var response2 = response.data;
  console.log('#### Second response:');
  console.log(response2);
  console.log(`#### Second response access_token: ${response2.user.access_token}`);
  console.log('Client claim invite!!!!!!!!!!!!!!!!!!!!!!!!');





    var data = JSON.stringify({"password":creds.password7,"repeat_password":creds.password7});

    var config = {
      method: 'post',
      url: 'https://api.bitboardexchange.com/v1/user/new_password',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer ' + response2.user.access_token, 
        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
      },
      data : data
    };

    axios(config)
    .then(function (response) {
    var response3 = response.data;
    console.log('#### Third response:');
    console.log(response3);
    console.log('Client new password (registration)!!!!!!!!!!!!!!!!!!!!!!!!');






      var data = JSON.stringify({"password":creds.password7,"email":creds.email7});

      var config = {
        method: 'post',
        url: 'https://api.bitboardexchange.com/v1/pub/client_login',
        headers: { 
          'Content-Type': 'application/json', 
          'Accept-Language': 'eu', 
          'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
        },
        data : data
      };

      axios(config)
      .then(function (response) {
      var responseAccess = response.data;
      console.log('#### Four response:');
      console.log(responseAccess);
      console.log(`#### Four response access_token: ${responseAccess.user.access_token}`);
      console.log('Client basic login!!!!!!!!!!!!!!!!!!!!!!!!');






        var data = '';

        var config = {
          method: 'get',
          url: 'https://api.bitboardexchange.com/v1/user/account',
          headers: { 
            'Authorization': 'Bearer ' + responseAccess.user.access_token, 
            'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
          },
          data : data
        };

        axios(config)
        .then(function (response) {
        var responseAccount = response.data;
        console.log('#### Five response:');
        console.log(responseAccount);
        console.log('Get accounts list!!!!!!!!!!!!!!!!!!!!!!!!!!!');



        var btcAccaunt = responseAccount.accounts.filter(item => item.account_currency == 'BTC');
        console.log(`#### Account BTC: ${btcAccaunt[0].account_guid}`);

        var ethAccaunt = responseAccount.accounts.filter(item => item.account_currency == 'ETH');
        console.log(`#### Account ETH: ${ethAccaunt[0].account_guid}`);

        var usdAccaunt = responseAccount.accounts.filter(item => item.account_currency == 'USD');
        console.log(`#### Account USD: ${usdAccaunt[0].account_guid}`);






          var config = {
            method: 'get',
            url: 'https://api.bitboardexchange.com/v1/oclient/wallet',
            headers: { 
            'Authorization': 'Bearer ' + responseAccess.user.access_token, 
            'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
            }
          };

          axios(config)
          .then(function (response) {
          var responseWallet = response.data;
          console.log('#### Six response:');
          console.log(responseWallet);
          console.log('Get Wallets!!!!!!!!!!!!!!!!!!!!!!!!!!!');


          var btcWallet = responseWallet.wallets.filter(item => item.currency_symbol == 'BTC');
          console.log(`#### Wallet BTC: ${btcWallet[0].client_wallet_guid}`);

          var ethWallet = responseWallet.wallets.filter(item => item.currency_symbol == 'ETH');
          console.log(`#### Wallet ETH: ${ethWallet[0].client_wallet_guid}`);

          var usdWallet = responseWallet.wallets.filter(item => item.currency_symbol == 'USD');
          console.log(`#### Wallet USD: ${usdWallet[0].client_wallet_guid}`);





            var data = JSON.stringify({
              "user_guid":"dca711b2-ca95-439a-be14-1c2e02b50705",
              "broker":"HFTB",
              "client_id":"101011",
              "currency_symbol":"BTC",
              "account_guid":btcAccaunt[0].account_guid,
              "client_wallet_guid":btcWallet[0].client_wallet_guid,
              "is_account_direction":true,
              "is_test":true,
              "score":3000});

            var config = {
              method: 'put',
              url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
              headers: { 
                'Content-Type': 'application/json', 
                'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
              },
              data : data
            };

            axios(config)
            .then(function (response) {
            var responseTransferWalletAccountBTC = response.data;
            console.log('#### Seven response:');
            console.log(responseTransferWalletAccountBTC);
            console.log('Wallet->Account transfer (BTC)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   






              var data = JSON.stringify({
                "user_guid":"f5d03435-15fd-409e-a857-2298fbd65987",
                "broker":"HFTB","client_id":"101011",
                "currency_symbol":"BTC",
                "account_guid":btcAccaunt[0].account_guid,
                "client_wallet_guid":btcWallet[0].client_wallet_guid,
                "is_account_direction":false,
                "is_test":false,
                "score":3000});

              var config = {
                method: 'put',
                url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                headers: { 
                  'Content-Type': 'application/json', 
                  'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                  'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                },
                data : data
              };

              axios(config)
              .then(function (response) {
              var responseTransferAccountWalletBTC = response.data;
              console.log('#### Eight response:');
              console.log(responseTransferAccountWalletBTC);
              console.log('Account->Wallet transfer (BTC)!!!!!!!!!!!!!!!!!!!!!!!!!!!');               





                var data = JSON.stringify({
                  "user_guid":"dca711b2-ca95-439a-be14-1c2e02b50705",
                  "broker":"HFTB",
                  "client_id":"101011",
                  "currency_symbol":"ETH",
                  "account_guid":ethAccaunt[0].account_guid,
                  "client_wallet_guid":ethWallet[0].client_wallet_guid,
                  "is_account_direction":true,
                  "is_test":true,
                  "score":2000});

                var config = {
                  method: 'put',
                  url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                  headers: { 
                    'Content-Type': 'application/json', 
                    'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                  },
                  data : data
                };

                axios(config)
                .then(function (response) {
                var responseTransferWalletAccountETH = response.data;
                console.log('#### Nine response:');
                console.log(responseTransferWalletAccountETH);
                console.log('Wallet->Account transfer (ETH)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   





                  var data = JSON.stringify({
                    "user_guid":"f5d03435-15fd-409e-a857-2298fbd65987",
                    "broker":"HFTB",
                    "client_id":"101011",
                    "currency_symbol":"ETH",
                    "account_guid":ethAccaunt[0].account_guid,
                    "client_wallet_guid":ethWallet[0].client_wallet_guid,
                    "is_account_direction":false,
                    "is_test":false,
                    "score":2000});

                  var config = {
                    method: 'put',
                    url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                    headers: { 
                      'Content-Type': 'application/json', 
                      'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                    },
                    data : data
                  };

                  axios(config)
                  .then(function (response) {
                  var responseTransferAccountWalletETH = response.data;
                  console.log('#### Ten response:');
                  console.log(responseTransferAccountWalletETH);
                  console.log('Account->Wallet transfer (ETH)!!!!!!!!!!!!!!!!!!!!!!!!!!!');               



                    var data = JSON.stringify({
                      "user_guid":"dca711b2-ca95-439a-be14-1c2e02b50705",
                      "broker":"HFTB",
                      "client_id":"101011",
                      "currency_symbol":"USD",
                      "account_guid":usdAccaunt[0].account_guid,
                      "client_wallet_guid":usdWallet[0].client_wallet_guid,
                      "is_account_direction":true,
                      "is_test":true,
                      "score":10000});

                    var config = {
                      method: 'put',
                      url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                      headers: { 
                        'Content-Type': 'application/json', 
                        'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                      },
                      data : data
                    };

                    axios(config)
                    .then(function (response) {
                    var responseTransferWalletAccountUSD = response.data;
                    console.log('#### USD ONE response:');
                    console.log(responseTransferWalletAccountUSD);
                    console.log('Wallet->Account transfer (USD)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   







                      var data = JSON.stringify({
                        "user_guid":"f5d03435-15fd-409e-a857-2298fbd65987",
                        "broker":"HFTB",
                        "client_id":"101011",
                        "currency_symbol":"USD",
                        "account_guid":usdAccaunt[0].account_guid,
                        "client_wallet_guid":usdWallet[0].client_wallet_guid,
                        "is_account_direction":false,
                        "is_test":false,
                        "score":10000});

                      var config = {
                        method: 'put',
                        url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                        headers: { 
                          'Content-Type': 'application/json', 
                          'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                          'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                        },
                        data : data
                      };

                      axios(config)
                      .then(function (response) {
                      var responseTransferAccountWalletUSD = response.data;
                      console.log('#### USD TWO response:');
                      console.log(responseTransferAccountWalletUSD);
                      console.log('Account->Wallet transfer (USD)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   



    /*


                        var config = {
                          method: 'get',
                          url: 'https://api.bitboardexchange.com/v1/pub/convert_score?currency_symbol_from=BTC&currency_symbol_to=USD&broker=HFTB',
                          headers: { 
                            'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                            'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                          }
                        };

                        axios(config)
                        .then(function (response) {
                          // console.log(JSON.stringify(response.data));
                        var responseConvertBTCUSD = response.data;
                        console.log('#### Eleven response:');
                        console.log(responseConvertBTCUSD);
                        console.log('Get Convert score BTCUSD!!!!!!!!!!!!!!!!!!!!!!!!!!!');





                          const from = 3;


                          var data = JSON.stringify({
                            "currency_symbol_from":"BTC",
                            "currency_symbol_to":"USD",
                            "score_from":from,
                            "score_to":from / responseConvertBTCUSD.score.score});

                          var config = {
                            method: 'put',
                            url: 'https://api.bitboardexchange.com/v1/oclient/convert',
                            headers: { 
                              'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                              'Content-Type': 'application/json', 
                              'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                            },
                            data : data
                          };

                          axios(config)
                          .then(function (response) {
                            // console.log(JSON.stringify(response.data));
                          var responseCreateConvertBTCUSD = response.data;
                          console.log('#### Twelve response:');
                          console.log(responseCreateConvertBTCUSD);
                          console.log('Create Convert BTCUSD!!!!!!!!!!!!!!!!!!!!!!!!!!!');  












                            var config = {
                              method: 'get',
                              url: 'https://api.bitboardexchange.com/v1/pub/convert_score?currency_symbol_from=USD&currency_symbol_to=BTC&broker=HFTB',
                              headers: { 
                                'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                                'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                              }
                            };

                            axios(config)
                            .then(function (response) {
                              // console.log(JSON.stringify(response.data));
                            var responseConvertUSDBTC = response.data;
                            console.log('#### Thirteen response:');
                            console.log(responseConvertUSDBTC);
                            console.log('Get Convert score USDBTC!!!!!!!!!!!!!!!!!!!!!!!!!!!');





                               const from2 = 66000;


                               var data = JSON.stringify({
                                 "currency_symbol_from":"USD",
                                 "currency_symbol_to":"BTC",
                                 "score_from":from2,
                                 "score_to":from2 / responseConvertUSDBTC.score.score});

                               var config = {
                                 method: 'put',
                                 url: 'https://api.bitboardexchange.com/v1/oclient/convert',
                                 headers: { 
                                   'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                                   'Content-Type': 'application/json', 
                                   'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                                 },
                                 data : data
                               };

                               axios(config)
                               .then(function (response) {
                                 // console.log(JSON.stringify(response.data));
                               var responseCreateConvertUSDBTC = response.data;
                               console.log('#### Fourteen response:');
                               console.log(responseCreateConvertUSDBTC);
                               console.log('Create Convert BTCUSD!!!!!!!!!!!!!!!!!!!!!!!!!!!');  



                               })
                               .catch(function (error) {
                                 console.log('#### ERROR in Fourteen response');
                                 console.log(error);
                               });



                            })
                            .catch(function (error) {
                              console.log('#### ERROR in Thirteen response');
                              console.log(error);
                            });




                          })
                          .catch(function (error) {
                            console.log('#### ERROR in Twelve response');
                            console.log(error);
                          });



                        })
                        .catch(function (error) {
                          console.log('#### ERROR in Eleven response');
                          console.log(error);
                        });

    */  
                      })
                      .catch(function (error) {
                        console.log('#### ERROR in Ten response');
                        console.log(error);
                      });


                    })
                    .catch(function (error) {
                      console.log('#### ERROR USD TWO response');
                      console.log(error);
                    });


                  })
                  .catch(function (error) {
                    console.log('#### ERROR USD ONE response');
                    console.log(error);
                  });


                })
                .catch(function (error) {
                  console.log('#### ERROR in Nine response');
                  console.log(error);
                });



              })
              .catch(function (error) {
                console.log('#### ERROR in Eight response');
                console.log(error);
              });



            })
            .catch(function (error) {
              console.log('#### ERROR in Seven response');
              console.log(error);
            });



          })
          .catch(function (error) {
            console.log('#### ERROR in Six response');
            console.log(error);
          });


        })
        .catch(function (error) {
          console.log('#### ERROR in Five response');
          console.log(error);
        });


      })
      .catch(function (error) {
        console.log('#### ERROR in Four response');
        console.log(error);
      });


    })
    .catch(function (error) {
      console.log('#### ERROR in Third response');
      console.log(error);
    }); 


  })
  .catch(function (error) {
    console.log('#### ERROR in Second response');
    console.log(error);
  });


})
.catch(function (error) {
  console.log('#### ERROR in First response');
  console.log(error);
});



    done();
   })();
});








  it('Conversion and transfers  !!!!!!!', function(done) {

(async () => {    
     this.timeout(1900000 + quantTimeout);

  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

await logIn (page, creds.email7, creds.password7);

// await logIn (page, 'tsygan199+test570@gmail.com', '12345');

    await page.waitForTimeout(5000);
    await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]`);
const walletPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]');
await walletPage[0].click();

// await page.goto('https://bitboardexchange.com/wallets');
  console.log('Success wallet page 1');

// await page.goto('https://bitboardexchange.com/terminal');
//   console.log('Success terminal page');

//     await page.waitForTimeout(1000);
//   await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div`);
// const subaccountsPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div');
// await subaccountsPage[0].click();
//   console.log('Success subaccounts page');
// await page.reload();

// await page.goto('https://bitboardexchange.com/subs');

// await page.goto('https://bitboardexchange.com/terminal');

//     await page.waitForTimeout(4000);
//     await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]/div`);
// const walletPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[4]/div');
// await walletPage[0].click();
// await page.goto('https://bitboardexchange.com/wallets');
    // console.log('Success wallet page 2');

    await page.waitForTimeout(6000);

  await page.waitForXPath(`//button//*[text()="ETH" and text()="Wallet"]`);
const buttonEth = await page.$x('//button//*[text()="ETH" and text()="Wallet"]');
await buttonEth[0].click();

//     await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/div/div`);
// const rollUpSubmenu = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/div/div');
// await rollUpSubmenu[0].click();

//  await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]/div/div[5]`);
// const showMore = await page.$x('/html/body/div[1]/div/div[2]/div/div[1]/div/div[5]');
// await showMore[0].click();

    // console.log('Show more');

    await page.waitForTimeout(2000);

  console.log('First transfer ETH   =   2000 ////////////////////////');
  console.log('******************************************');  

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='Transfer']`, 'WallWidg', 'Transfer');
await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='2 000.00']`, 'WallWidg', '2 000.00');
await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='ETH']`, 'WallWidg VALUTA FROM', 'ETH');
/*
await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Conversion']`, '№1 input WallWidg', 'Conversion');
await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Conversion']`, '№1 input ConvWidg', 'Conversion');
await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][4]//span[text()='Conversion']`, '№2 input WallWidg', 'Conversion');
await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][4]//span[text()='Conversion']`, '№2 input ConvWidg', 'Conversion');
*/


await quantConvert (page, 'BTC', 'USD', '13.00000');
await totgetConvert (page, 'BTC', 'USD', '25%');

await quantConvert (page, 'BTC', 'ETH', '23.00000');
await totgetConvert (page, 'BTC', 'ETH', '25%');

await quantConvert (page, 'ETH', 'USD', '9.00000');
await totgetConvert (page, 'ETH', 'USD', '25%');

await quantConvert (page, 'ETH', 'BTC', '4.00000');
await totgetConvert (page, 'ETH', 'BTC', '25%');

await quantConvert (page, 'USD', 'BTC', '1 200.00');
await totgetConvert (page, 'USD', 'BTC', '25%');

await quantConvert (page, 'USD', 'ETH', '90.00');
await totgetConvert (page, 'USD', 'ETH', '25%');

// await rollUpSubmenu[0].click();

await quantTransfer (page, 'ETH', '23.0000');
await totgetTransfer (page, 'ETH', '25%');

await quantTransfer (page, 'BTC', '12.00000');
await totgetTransfer (page, 'BTC', '25%');

await quantTransfer (page, 'USD', '30.00');
await totgetTransfer (page, 'USD', '25%');




  await page.waitForXPath(`//button//*[text()="BTC" and text()="Wallet"]`);
const buttonBtc = await page.$x('//button//*[text()="BTC" and text()="Wallet"]');
await buttonBtc[0].click();

    await page.waitForTimeout(2000);

  console.log('First transfer BTC  =  3000 ////////////////////////');
  console.log('******************************************');  

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='Transfer']`, 'WallWidg', 'Transfer');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='3 000.000']`, 'WallWidg', '3 000.000');

await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='BTC']`, 'WallWidg VALUTA FROM', 'BTC');

//     await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/div/div`);
// const rollUpSubmenu = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/div/div');
// await rollUpSubmenu[0].click();

await quantConvert (page, 'BTC', 'USD', '1.000000');
await quantConvert (page, 'BTC', 'USD', '2.000000');
await quantConvert (page, 'BTC', 'USD', '3.000000');
await quantConvert (page, 'BTC', 'USD', '4.000000');
await quantConvert (page, 'BTC', 'USD', '5.000000');
await quantConvert (page, 'BTC', 'USD', '6.000000');
await quantConvert (page, 'BTC', 'USD', '7.000000');
await quantConvert (page, 'BTC', 'USD', '8.000000');
await quantConvert (page, 'BTC', 'USD', '9.000000');
await quantConvert (page, 'BTC', 'USD', '10.00000');
await quantConvert (page, 'BTC', 'USD', '11.00000');
await quantConvert (page, 'BTC', 'USD', '12.00000');
await quantConvert (page, 'BTC', 'USD', '13.00000');
await quantConvert (page, 'BTC', 'USD', '14.00000');
await quantConvert (page, 'BTC', 'USD', '15.00000');
await quantConvert (page, 'BTC', 'USD', '16.00000');
await quantConvert (page, 'BTC', 'USD', '17.00000');
await quantConvert (page, 'BTC', 'USD', '18.00000');
await quantConvert (page, 'BTC', 'USD', '19.00000');
await quantConvert (page, 'BTC', 'USD', '20.00000');
await quantConvert (page, 'BTC', 'USD', '21.00000');
await quantConvert (page, 'BTC', 'USD', '22.00000');
await quantConvert (page, 'BTC', 'USD', '23.00000');
await quantConvert (page, 'BTC', 'USD', '24.00000');
await quantConvert (page, 'BTC', 'USD', '25.00000');
await quantConvert (page, 'BTC', 'USD', '26.00000');
await quantConvert (page, 'BTC', 'USD', '27.00000');
await quantConvert (page, 'BTC', 'USD', '28.00000');
await quantConvert (page, 'BTC', 'USD', '29.00000');
await quantConvert (page, 'BTC', 'USD', '30.00000');

//  await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]/div/div[5]`);
// const showMore = await page.$x('/html/body/div[1]/div/div[2]/div/div[1]/div/div[5]');
// await showMore[0].click();
//   console.log('Show more');

  await page.waitForXPath(`/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]`);
const clickFirstScrollConversWidg = await page.$x(`/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]`);
await clickFirstScrollConversWidg[0].click();

await page.mouse.wheel({ deltaY: 500 })
    await page.waitForTimeout(2000);
await page.mouse.wheel({ deltaY: 500 })
    await page.waitForTimeout(2000);
await page.mouse.wheel({ deltaY: 500 })
    await page.waitForTimeout(2000);
await page.mouse.wheel({ deltaY: 500 })

    await page.waitForTimeout(2000);
  console.log('AFTER SCROLL widget conversion !!!  ////////////////////////');
  console.log('First conversion widget conversion =  13  ////////////////////////');
  console.log('******************************************');

await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='Conversion']`, 'ConvWidg', 'Conversion');
await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='13.00000']`, 'ConvWidg', '13.00000');
await equallyXpathInnerText (page, `/html/body/div[1]/div/div[2]/div/div[1]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='BTC']`, 'ConvWidg VALUTA FROM', 'BTC');




  await page.waitForXPath(`//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]`);
const clickFirstScrollWallet = await page.$x(`//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]`);
await clickFirstScrollWallet[0].click();

// await page.mouse.wheel({ deltaY: 500 })
//     await page.waitForTimeout(2000);
// await page.mouse.wheel({ deltaY: 500 })
//     await page.waitForTimeout(2000);
// await page.mouse.wheel({ deltaY: 500 })
//     await page.waitForTimeout(2000);
// await page.mouse.wheel({ deltaY: 500 })
//     await page.waitForTimeout(2000);
// await page.mouse.wheel({ deltaY: 500 })
//     await page.waitForTimeout(2000);
// await page.mouse.wheel({ deltaY: 500 })
//     await page.waitForTimeout(2000);
// await page.mouse.wheel({ deltaY: 500 })
//     await page.waitForTimeout(2000);
// await page.mouse.wheel({ deltaY: 500 })


    await page.waitForTimeout(2000);
  console.log('AFTER SCROLL widget wallet !!!  ////////////////////////');
  console.log('First transfer widget wallet   =  3000  ////////////////////////');
  console.log('******************************************');

// await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='Transfer']`, 'WallWidg', 'Transfer');
// await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='3 000.000']`, 'WallWidg', '3 000.000');
// await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='BTC']`, 'WallWidg VALUTA FROM', 'BTC');




  await page.waitForXPath(`//button//*[text()="BTC" and text()="Wallet"]`);
const buttonValut = await page.$x(`//button//*[text()="BTC" and text()="Wallet"]`);
await buttonValut[0].click();

//   await page.waitForSelector(`button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)`);
// await page.click('button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)')

  await page.waitForXPath(`//button//span[text()="Transfer"]`);
const buttonTransfer = await page.$x(`//button//span[text()="Transfer"]`);
await buttonTransfer[0].click();

  await page.waitForXPath(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
const tabSend = await page.$x(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
await tabSend[0].click();

  await page.waitForTimeout(1000);
  await page.waitForXPath(`//div[contains(@class,'dragZone')]//div[@inputmode='numeric']//input[@type='text']`);
const inputTransfer = await page.$x(`//div[contains(@class,'dragZone')]//div[@inputmode='numeric']//input[@type='text']`);
await inputTransfer[0].type(``);

await elementDelete (page, `//div[contains(@class,'dragZone')]//div[@inputmode='numeric']//input[@type='text']`);

await inputTransfer[0].type('600');

  await page.waitForTimeout(1000);

  await page.waitForXPath(`//span[@class='MuiButton-label' and text()="Send"]`);
const buttonSend = await page.$x(`//span[@class='MuiButton-label' and text()="Send"]`);
await buttonSend[0].click();

  console.log('Transfer wallets--subaccouts BTC = 600   ////////////////////////');
  console.log('******************************************');

  await page.waitForTimeout(3000);

await equallyXpathInnerText (page, `//*[text()="Success!"]`, 'Text appeared snackbar', 'Success!');
await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'WallWidg', 'Transfer');
await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="600.0000"]`, 'WallWidg', '600.0000');
await equallyXpathInnerText (page, `//*[contains(@class,'dragZone')]//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="BTC"]`, 'WallWidg VALUTA FROM', 'BTC');

  await page.waitForXPath(`/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div`);
const subaccountsPage = await page.$x('/html/body/div[1]/div/div[1]/div/div[1]/ul[1]/div[3]/div');
await subaccountsPage[0].click();

    await page.waitForTimeout(2000);
  await page.waitForXPath(`//button//*[text()="BTC trading account"]`);
const buttonTrading = await page.$x(`//button//*[text()="BTC trading account"]`);
await buttonTrading[0].click(`//button//*[text()="BTC trading account"]`);

    await page.waitForTimeout(12000);
await equallyXpathInnerText (page, `//div[contains(@class,'MuiBox-root')][1]//div[contains(@class,'MuiBox-root')][1]//*[text()="600.0000"]`, 'Fact amount subaccouts', '600.0000');

  await page.waitForXPath(`//button//span[text()="Transfers"]`);
const buttonTransfers = await page.$x(`//button//span[text()="Transfers"]`);
await buttonTransfers[0].click();

  await page.waitForTimeout(1000);

  console.log('Subaccouts history subaccouts--wallets = 600  ////////////////////////');
  console.log('******************************************');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()='Transfer']`, 'Transfers subaccouts', 'Transfer');
await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="600.0000"]`, 'Transfers subaccouts', '600.0000');
await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][1]//*[contains(@class,'MuiTableRow-root')][2]//span[text()="BTC"]`, 'Transfers subaccouts VALUTA FROM', 'BTC');

 //       await page.waitForSelector(`button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)`);
 // await page.click('button.MuiIconButton-root.MuiIconButton-root:nth-of-type(2)')

  await page.waitForXPath(`//button//span[text()="Transfer"]`);
const buttonTransfer2 = await page.$x(`//button//span[text()="Transfer"]`);
await buttonTransfer2[0].click();

  await page.waitForXPath(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
const tabSend2 = await page.$x(`//button//span[text()="Send" and contains(@class,'MuiTab-wrapper')]`);
await tabSend2[0].click();

  await page.waitForTimeout(1000);

await quantTransferSub (page, 'BTC', '1.000000');
await quantTransferSub (page, 'BTC', '2.000000');
await quantTransferSub (page, 'BTC', '3.000000');
await quantTransferSub (page, 'BTC', '4.000000');
await quantTransferSub (page, 'BTC', '5.000000');
await quantTransferSub (page, 'BTC', '6.000000');
await quantTransferSub (page, 'BTC', '7.000000');
await quantTransferSub (page, 'BTC', '8.000000');
await quantTransferSub (page, 'BTC', '9.000000');
await quantTransferSub (page, 'BTC', '10.00000');
await quantTransferSub (page, 'BTC', '11.00000');
await quantTransferSub (page, 'BTC', '12.00000');
await quantTransferSub (page, 'BTC', '13.00000');
await quantTransferSub (page, 'BTC', '14.00000');
await quantTransferSub (page, 'BTC', '15.00000');
await quantTransferSub (page, 'BTC', '16.00000');
await quantTransferSub (page, 'BTC', '17.00000');
await quantTransferSub (page, 'BTC', '18.00000');
await quantTransferSub (page, 'BTC', '19.00000');
await quantTransferSub (page, 'BTC', '20.00000');
await quantTransferSub (page, 'BTC', '21.00000');
await quantTransferSub (page, 'BTC', '22.00000');
await quantTransferSub (page, 'BTC', '23.00000');
await quantTransferSub (page, 'BTC', '24.00000');
await quantTransferSub (page, 'BTC', '25.00000');
await quantTransferSub (page, 'BTC', '26.00000');
await quantTransferSub (page, 'BTC', '27.00000');
await quantTransferSub (page, 'BTC', '28.00000');
await quantTransferSub (page, 'BTC', '29.00000');
await quantTransferSub (page, 'BTC', '30.00000');

//   await page.waitForTimeout(5000);
//   await page.waitForXPath(`//div[@class="MuiInputAdornment-root MuiInputAdornment-positionStart"]`);
// const leftMonth = await page.$x(`//div[@class="MuiInputAdornment-root MuiInputAdornment-positionStart"]`);
// await leftMonth[0].click();
//   await page.waitForTimeout(3000);
//   await page.waitForXPath(`//div[@class="sc-fzokOt hLgJkJ"]//div[@class="MuiInputAdornment-root MuiInputAdornment-positionEnd"]`);
// const rightMonth = await page.$x(`//div[@class="sc-fzokOt hLgJkJ"]//div[@class="MuiInputAdornment-root MuiInputAdornment-positionEnd"]`);
// await rightMonth[0].click();
//   await page.waitForTimeout(3000);

//   await page.waitForXPath(`//button//span[text()="Transfers"]`);
// const buttonTransfers = await page.$x(`//button//span[text()="Transfers"]`);
// await buttonTransfers[0].click();

    await page.waitForTimeout(1000);
  await page.waitForXPath(`//*[contains(@class,'MuiTableRow-root')][2]`);
const firstTransfers = await page.$x(`//*[contains(@class,'MuiTableRow-root')][2]`);
await firstTransfers[0].click();

await page.mouse.wheel({ deltaY: 500 })
    await page.waitForTimeout(2000);
await page.mouse.wheel({ deltaY: 500 })
    await page.waitForTimeout(2000);
await page.mouse.wheel({ deltaY: 500 })
    await page.waitForTimeout(2000);
await page.mouse.wheel({ deltaY: 500 })
    await page.waitForTimeout(2000);
await page.mouse.wheel({ deltaY: 500 })

    await page.waitForTimeout(2000);
  console.log('AFTER SCROLL history transfers !!!  ////////////////////////');
  console.log('Subaccouts history subaccouts--wallets  =  3000  ////////////////////////');
  console.log('******************************************');

await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='Transfer']`, 'Transfers subaccouts', 'Transfer');
await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='BTC']`, 'Transfers subaccouts', 'BTC');
await equallyXpathInnerText (page, `//*[@class="MuiTableBody-root"][last()]//*[contains(@class,'MuiTableRow-root')][last()-1]//span[text()='3 000.000']`, 'Transfers subaccouts', '3 000.000');



  await page.waitForTimeout(4000);
  // await browser.close();

await page.close();
      done();   
  })();
});










  it('Registration 8 user, terminal !!!!!!!', function(done) {

(async () => {
     this.timeout(40000 + quantTimeout);



var data = JSON.stringify({"email":creds.email8,"broker":"HFTB","name":creds.name8});

var config = {
  method: 'put',
  url: 'https://api.bitboardexchange.com/v1/pub/invite',
  headers: { 
    'Content-Type': 'application/json', 
    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
  },
  data : data
};

axios(config)
.then(function (response) {

  var response1 = response.data;
console.log('#### First response:');
console.log(response1);
console.log(`#### First response debug_info: ${response1.debug_info}`);
console.log('Client invite!!!!!!!!!!!!!!!!!!!!!!!!');





  var data = '';

  var config = {
    method: 'put',
    url: 'https://api.bitboardexchange.com/v1/pub/client_claim_invite/'+ response1.debug_info,
    headers: { 
      'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
    },
    data : data
  };

  axios(config)
  .then(function (response) {
  var response2 = response.data;
  console.log('#### Second response:');
  console.log(response2);
  console.log(`#### Second response access_token: ${response2.user.access_token}`);
  console.log('Client claim invite!!!!!!!!!!!!!!!!!!!!!!!!');





    var data = JSON.stringify({"password":creds.password8,"repeat_password":creds.password8});

    var config = {
      method: 'post',
      url: 'https://api.bitboardexchange.com/v1/user/new_password',
      headers: { 
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer ' + response2.user.access_token, 
        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
      },
      data : data
    };

    axios(config)
    .then(function (response) {
    var response3 = response.data;
    console.log('#### Third response:');
    console.log(response3);
    console.log('Client new password (registration)!!!!!!!!!!!!!!!!!!!!!!!!');






      var data = JSON.stringify({"password":creds.password8,"email":creds.email8});

      var config = {
        method: 'post',
        url: 'https://api.bitboardexchange.com/v1/pub/client_login',
        headers: { 
          'Content-Type': 'application/json', 
          'Accept-Language': 'eu', 
          'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
        },
        data : data
      };

      axios(config)
      .then(function (response) {
      var responseAccess = response.data;
      console.log('#### Four response:');
      console.log(responseAccess);
      console.log(`#### Four response access_token: ${responseAccess.user.access_token}`);
      console.log('Client basic login!!!!!!!!!!!!!!!!!!!!!!!!');






        var data = '';

        var config = {
          method: 'get',
          url: 'https://api.bitboardexchange.com/v1/user/account',
          headers: { 
            'Authorization': 'Bearer ' + responseAccess.user.access_token, 
            'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
          },
          data : data
        };

        axios(config)
        .then(function (response) {
        var responseAccount = response.data;
        console.log('#### Five response:');
        console.log(responseAccount);
        console.log('Get accounts list!!!!!!!!!!!!!!!!!!!!!!!!!!!');



        var btcAccaunt = responseAccount.accounts.filter(item => item.account_currency == 'BTC');
        console.log(`#### Account BTC: ${btcAccaunt[0].account_guid}`);

        var ethAccaunt = responseAccount.accounts.filter(item => item.account_currency == 'ETH');
        console.log(`#### Account ETH: ${ethAccaunt[0].account_guid}`);

        var usdAccaunt = responseAccount.accounts.filter(item => item.account_currency == 'USD');
        console.log(`#### Account USD: ${usdAccaunt[0].account_guid}`);






          var config = {
            method: 'get',
            url: 'https://api.bitboardexchange.com/v1/oclient/wallet',
            headers: { 
            'Authorization': 'Bearer ' + responseAccess.user.access_token, 
            'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
            }
          };

          axios(config)
          .then(function (response) {
          var responseWallet = response.data;
          console.log('#### Six response:');
          console.log(responseWallet);
          console.log('Get Wallets!!!!!!!!!!!!!!!!!!!!!!!!!!!');


          var btcWallet = responseWallet.wallets.filter(item => item.currency_symbol == 'BTC');
          console.log(`#### Wallet BTC: ${btcWallet[0].client_wallet_guid}`);

          var ethWallet = responseWallet.wallets.filter(item => item.currency_symbol == 'ETH');
          console.log(`#### Wallet ETH: ${ethWallet[0].client_wallet_guid}`);

          var usdWallet = responseWallet.wallets.filter(item => item.currency_symbol == 'USD');
          console.log(`#### Wallet USD: ${usdWallet[0].client_wallet_guid}`);





            var data = JSON.stringify({
              "user_guid":"dca711b2-ca95-439a-be14-1c2e02b50705",
              "broker":"HFTB",
              "client_id":"101011",
              "currency_symbol":"BTC",
              "account_guid":btcAccaunt[0].account_guid,
              "client_wallet_guid":btcWallet[0].client_wallet_guid,
              "is_account_direction":true,
              "is_test":true,
              "score":1200});

            var config = {
              method: 'put',
              url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
              headers: { 
                'Content-Type': 'application/json', 
                'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
              },
              data : data
            };

            axios(config)
            .then(function (response) {
            var responseTransferWalletAccountBTC = response.data;
            console.log('#### Seven response:');
            console.log(responseTransferWalletAccountBTC);
            console.log('Wallet->Account transfer (BTC)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   






              // var data = JSON.stringify({
              //   "user_guid":"f5d03435-15fd-409e-a857-2298fbd65987",
              //   "broker":"HFTB","client_id":"101011",
              //   "currency_symbol":"BTC",
              //   "account_guid":btcAccaunt[0].account_guid,
              //   "client_wallet_guid":btcWallet[0].client_wallet_guid,
              //   "is_account_direction":false,
              //   "is_test":false,
              //   "score":1200});

              // var config = {
              //   method: 'put',
              //   url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
              //   headers: { 
              //     'Content-Type': 'application/json', 
              //     'Authorization': 'Bearer ' + responseAccess.user.access_token, 
              //     'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
              //   },
              //   data : data
              // };

              // axios(config)
              // .then(function (response) {
              // var responseTransferAccountWalletBTC = response.data;
              // console.log('#### Eight response:');
              // console.log(responseTransferAccountWalletBTC);
              // console.log('Account->Wallet transfer (BTC)!!!!!!!!!!!!!!!!!!!!!!!!!!!');               





                var data = JSON.stringify({
                  "user_guid":"dca711b2-ca95-439a-be14-1c2e02b50705",
                  "broker":"HFTB",
                  "client_id":"101011",
                  "currency_symbol":"ETH",
                  "account_guid":ethAccaunt[0].account_guid,
                  "client_wallet_guid":ethWallet[0].client_wallet_guid,
                  "is_account_direction":true,
                  "is_test":true,
                  "score":1000});

                var config = {
                  method: 'put',
                  url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                  headers: { 
                    'Content-Type': 'application/json', 
                    'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                    'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                  },
                  data : data
                };

                axios(config)
                .then(function (response) {
                var responseTransferWalletAccountETH = response.data;
                console.log('#### Nine response:');
                console.log(responseTransferWalletAccountETH);
                console.log('Wallet->Account transfer (ETH)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   





                //   var data = JSON.stringify({
                //     "user_guid":"f5d03435-15fd-409e-a857-2298fbd65987",
                //     "broker":"HFTB",
                //     "client_id":"101011",
                //     "currency_symbol":"ETH",
                //     "account_guid":ethAccaunt[0].account_guid,
                //     "client_wallet_guid":ethWallet[0].client_wallet_guid,
                //     "is_account_direction":false,
                //     "is_test":false,
                //     "score":1000});

                //   var config = {
                //     method: 'put',
                //     url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                //     headers: { 
                //       'Content-Type': 'application/json', 
                //       'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                //       'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                //     },
                //     data : data
                //   };

                //   axios(config)
                //   .then(function (response) {
                //   var responseTransferAccountWalletETH = response.data;
                //   console.log('#### Ten response:');
                //   console.log(responseTransferAccountWalletETH);
                //   console.log('Account->Wallet transfer (ETH)!!!!!!!!!!!!!!!!!!!!!!!!!!!');               





                    var data = JSON.stringify({
                      "user_guid":"dca711b2-ca95-439a-be14-1c2e02b50705",
                      "broker":"HFTB",
                      "client_id":"101011",
                      "currency_symbol":"USD",
                      "account_guid":usdAccaunt[0].account_guid,
                      "client_wallet_guid":usdWallet[0].client_wallet_guid,
                      "is_account_direction":true,
                      "is_test":true,
                      "score":10000});

                    var config = {
                      method: 'put',
                      url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                      headers: { 
                        'Content-Type': 'application/json', 
                        'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                        'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                      },
                      data : data
                    };

                    axios(config)
                    .then(function (response) {
                    var responseTransferWalletAccountUSD = response.data;
                    console.log('#### USD ONE response:');
                    console.log(responseTransferWalletAccountUSD);
                    console.log('Wallet->Account transfer (USD)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   







                      // var data = JSON.stringify({
                      //   "user_guid":"f5d03435-15fd-409e-a857-2298fbd65987",
                      //   "broker":"HFTB",
                      //   "client_id":"101011",
                      //   "currency_symbol":"USD",
                      //   "account_guid":usdAccaunt[0].account_guid,
                      //   "client_wallet_guid":usdWallet[0].client_wallet_guid,
                      //   "is_account_direction":false,
                      //   "is_test":false,
                      //   "score":10000});

                      // var config = {
                      //   method: 'put',
                      //   url: 'https://api.bitboardexchange.com/v1/oclient/account_wallet_transfer',
                      //   headers: { 
                      //     'Content-Type': 'application/json', 
                      //     'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                      //     'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                      //   },
                      //   data : data
                      // };

                      // axios(config)
                      // .then(function (response) {
                      // var responseTransferAccountWalletUSD = response.data;
                      // console.log('#### USD TWO response:');
                      // console.log(responseTransferAccountWalletUSD);
                      // console.log('Account->Wallet transfer (USD)!!!!!!!!!!!!!!!!!!!!!!!!!!!');   






    /*


                        var config = {
                          method: 'get',
                          url: 'https://api.bitboardexchange.com/v1/pub/convert_score?currency_symbol_from=BTC&currency_symbol_to=USD&broker=HFTB',
                          headers: { 
                            'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                            'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                          }
                        };

                        axios(config)
                        .then(function (response) {
                          // console.log(JSON.stringify(response.data));
                        var responseConvertBTCUSD = response.data;
                        console.log('#### Eleven response:');
                        console.log(responseConvertBTCUSD);
                        console.log('Get Convert score BTCUSD!!!!!!!!!!!!!!!!!!!!!!!!!!!');





                          const from = 3;


                          var data = JSON.stringify({
                            "currency_symbol_from":"BTC",
                            "currency_symbol_to":"USD",
                            "score_from":from,
                            "score_to":from / responseConvertBTCUSD.score.score});

                          var config = {
                            method: 'put',
                            url: 'https://api.bitboardexchange.com/v1/oclient/convert',
                            headers: { 
                              'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                              'Content-Type': 'application/json', 
                              'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                            },
                            data : data
                          };

                          axios(config)
                          .then(function (response) {
                            // console.log(JSON.stringify(response.data));
                          var responseCreateConvertBTCUSD = response.data;
                          console.log('#### Twelve response:');
                          console.log(responseCreateConvertBTCUSD);
                          console.log('Create Convert BTCUSD!!!!!!!!!!!!!!!!!!!!!!!!!!!');  












                            var config = {
                              method: 'get',
                              url: 'https://api.bitboardexchange.com/v1/pub/convert_score?currency_symbol_from=USD&currency_symbol_to=BTC&broker=HFTB',
                              headers: { 
                                'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                                'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                              }
                            };

                            axios(config)
                            .then(function (response) {
                              // console.log(JSON.stringify(response.data));
                            var responseConvertUSDBTC = response.data;
                            console.log('#### Thirteen response:');
                            console.log(responseConvertUSDBTC);
                            console.log('Get Convert score USDBTC!!!!!!!!!!!!!!!!!!!!!!!!!!!');





                               const from2 = 66000;


                               var data = JSON.stringify({
                                 "currency_symbol_from":"USD",
                                 "currency_symbol_to":"BTC",
                                 "score_from":from2,
                                 "score_to":from2 / responseConvertUSDBTC.score.score});

                               var config = {
                                 method: 'put',
                                 url: 'https://api.bitboardexchange.com/v1/oclient/convert',
                                 headers: { 
                                   'Authorization': 'Bearer ' + responseAccess.user.access_token, 
                                   'Content-Type': 'application/json', 
                                   'Cookie': '__cfduid=d3c8d75de57e7c3ce2d1ede449d7213651614588670'
                                 },
                                 data : data
                               };

                               axios(config)
                               .then(function (response) {
                                 // console.log(JSON.stringify(response.data));
                               var responseCreateConvertUSDBTC = response.data;
                               console.log('#### Fourteen response:');
                               console.log(responseCreateConvertUSDBTC);
                               console.log('Create Convert BTCUSD!!!!!!!!!!!!!!!!!!!!!!!!!!!');  



                               })
                               .catch(function (error) {
                                 console.log('#### ERROR in Fourteen response');
                                 console.log(error);
                               });



                            })
                            .catch(function (error) {
                              console.log('#### ERROR in Thirteen response');
                              console.log(error);
                            });




                          })
                          .catch(function (error) {
                            console.log('#### ERROR in Twelve response');
                            console.log(error);
                          });



                        })
                        .catch(function (error) {
                          console.log('#### ERROR in Eleven response');
                          console.log(error);
                        });

    */  
                    //   })
                    //   .catch(function (error) {
                    //     console.log('#### ERROR in Ten response');
                    //     console.log(error);
                    //   });



                    // })
                    // .catch(function (error) {
                    //   console.log('#### ERROR USD TWO response');
                    //   console.log(error);
                    // });


                  })
                  .catch(function (error) {
                    console.log('#### ERROR USD ONE response');
                    console.log(error);
                  });



                })
                .catch(function (error) {
                  console.log('#### ERROR in Nine response');
                  console.log(error);
                });



              // })
              // .catch(function (error) {
              //   console.log('#### ERROR in Eight response');
              //   console.log(error);
              // });



            })
            .catch(function (error) {
              console.log('#### ERROR in Seven response');
              console.log(error);
            });



          })
          .catch(function (error) {
            console.log('#### ERROR in Six response');
            console.log(error);
          });


        })
        .catch(function (error) {
          console.log('#### ERROR in Five response');
          console.log(error);
        });


      })
      .catch(function (error) {
        console.log('#### ERROR in Four response');
        console.log(error);
      });


    })
    .catch(function (error) {
      console.log('#### ERROR in Third response');
      console.log(error);
    }); 


  })
  .catch(function (error) {
    console.log('#### ERROR in Second response');
    console.log(error);
  });


})
.catch(function (error) {
  console.log('#### ERROR in First response');
  console.log(error);
});



    done();
   })();
});











  it('Creating marker and limit orders  !!!!!!!', function(done) {


(async () => {
     this.timeout(1600000 + quantTimeout);


  const context = await browser.createIncognitoBrowserContext();
  const page = await context.newPage();

await sizeBrowser (page);

await page.goto('https://bitboardexchange.com/auth');

    await enLangvuage (page);

  await logIn (page, creds.email8, creds.password8);

 // await logIn (page, 'tsygan199+test171@gmail.com', '12345');
  // await page.reload();

    await page.waitForTimeout(12000);


  console.log('******************************************');  
await choiceSubaccount (page, 'BTC trading account');
  console.log('******************************************');  


await limitOrder (page, 'Sell', 'selling', '3', '9', 'Limit sell (Selling==)', '9', 'ETHUSD');

await limitOrder (page, 'Sell', 'selling', '3', '11', 'Limit sell (Selling==)', '20', 'ETHUSD');
              
await marketOrder (page, 'Sell', 'short', '20', 'Market sell (Short==)', '-'+'20', 'ETHUSD');

await marketOrder (page, 'Sell', 'short', '20', 'Market sell (Short==)', '-'+'40', 'ETHUSD');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '9', 'ETHUSD');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '0', 'ETHUSD');

await marketOrder (page, 'Buy', 'long', '40', 'Market buy (Long==)',  'empty', 'ETHUSD');



await limitOrder (page, 'Sell', 'selling', '3', '54', 'Limit sell (Selling==)', '54', 'ETHBTC');
            
await marketOrder (page, 'Sell', 'short', '73', 'Market sell (Short==)', '-'+'73', 'ETHBTC');

await marketOrder (page, 'Buy', 'short', '73', 'Market buy (Short==)',  '0', 'ETHBTC');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', 'empty', 'ETHBTC');


await limitOrder (page, 'Buy', 'buying', '1', '112', 'Limit buy (Buying==)', '112', 'BTCUSD');

await marketOrder (page, 'Buy', 'long', '67', 'Market buy (Long==)', '67', 'BTCUSD');

await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '0', 'BTCUSD');

await marketOrder (page, 'Sell', 'short', '77', 'Market sell (Short==)', '-'+'10', 'BTCUSD');



await limitOrder (page, 'Buy', 'buying', '1', '37', 'Limit buy (Buying==)', '37', 'ETHUSD');

await marketOrder (page, 'Buy', 'long', '23', 'Market buy (Long==)', '23', 'ETHUSD');

await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '0', 'ETHUSD');

await marketOrder (page, 'Sell', 'short', '23', 'Market sell (Short==)', 'no instrum', 'ETHUSD');


await deletePortfolio (page);


// await limitOrder (page, 'Sell', 'selling', '90000.0', '2', 'Limit sell (Selling==)', '2', 'BTCUSD');          
// await marketOrder (page, 'Sell', 'short', '3', 'Market sell (Short==)', '13', 'BTCUSD');
// await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '0', 'BTCUSD');
// await marketOrder (page, 'Buy', 'short', '12', 'Market long (Short==)', '1', 'BTCUSD');

// await limitOrder (page, 'Buy', 'buying', '0.0100000', '60', 'Limit buy (Buying==)', '60', 'ETHBTC');
// await limitOrder (page, 'Buy', 'buying', '0.0200000', '12', 'Limit buy (Buying==)', '72', 'ETHBTC');
// await marketOrder (page, 'Buy', 'long', '49', 'Market buy (Long==)', '49', 'ETHBTC');
// await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '60', 'ETHBTC');
// await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '0', 'ETHBTC');
// await marketOrder (page, 'Sell', 'long', '10', 'Market sell (Long==)', '39', 'ETHBTC');



  console.log('******************************************');  
await choiceSubaccount (page, 'ETH trading account');
  console.log('******************************************');  



//         await page.waitForXPath(`//div[@class="sc-fzqNJr hXQgjp"]//*[contains(@class,'widgetDragZone')]/div/div/div[1]//*[contains(@class,'MuiSvgIcon-root')]`);
// const vidgBsPlaceOrder = await page.$x(`//div[@class="sc-fzqNJr hXQgjp"]//*[contains(@class,'widgetDragZone')]/div/div/div[1]//*[contains(@class,'MuiSvgIcon-root')]`);
// await vidgBsPlaceOrder[0].click();
//     await page.waitForTimeout(1000);
// await vidgBsPlaceOrder[0].click();
//     await page.waitForTimeout(1000);
// await vidgBsPlaceOrder[0].click();
//     await page.waitForTimeout(1000);
// await vidgBsPlaceOrder[0].click();

    await page.waitForXPath(`//button//*[text()="Sell"]`);
const buttonBS = await page.$x(`//button//*[text()="Sell"]`);
await buttonBS[0].click();

    await page.waitForSelector(`input[type="checkbox"]`);
await page.click(`input[type="checkbox"]`);

        await page.waitForXPath(`//div[contains(@class,'MuiDialogContent-root')]/div/div[1]/div[1]/div[1]//*[contains(@class,'MuiSvgIcon-root')]`);
const closePlaceOrder = await page.$x(`//div[contains(@class,'MuiDialogContent-root')]/div/div[1]/div[1]/div[1]//*[contains(@class,'MuiSvgIcon-root')]`);
await closePlaceOrder[0].click();

    await page.waitForTimeout(2000);


await limitOrder (page, 'Sell', 'selling', '3', '17', 'Limit sell (Selling==)', '17', 'BTCUSD');

await marketOrder (page, 'Sell', 'short', '12', 'Market sell (Short==)', '-'+'12', 'BTCUSD');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '0', 'BTCUSD');

await marketOrder (page, 'Buy', 'long', '12', 'Market long (Long==)', 'empty', 'BTCUSD');



await limitOrder (page, 'Buy', 'buying', '1', '45', 'Limit buy (Buying==)', '45', 'BTCUSD');

await limitOrder (page, 'Buy', 'buying', '1', '55', 'Limit buy (Buying==)', '100', 'BTCUSD');

await marketOrder (page, 'Buy', 'long', '15', 'Market buy (Long==)', '15', 'BTCUSD');

await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '45', 'BTCUSD');

await marketOrder (page, 'Sell', 'long', '12', 'Market sell (Long==)', '3', 'BTCUSD');



await limitOrder (page, 'Buy', 'buying', '1', '21', 'Limit buy (Buying==)', '21', 'ETHBTC');

await marketOrder (page, 'Buy', 'long', '11', 'Market buy (Long==)', '11', 'ETHBTC');

await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '0', 'ETHBTC');

await marketOrder (page, 'Sell', 'short', '17', 'Market sell (Short==)', '-'+'6', 'ETHBTC');



await limitOrder (page, 'Sell', 'selling', '3', '23', 'Limit sell (Selling==)', '23', 'ETHUSD');

await marketOrder (page, 'Sell', 'short', '34', 'Market sell (Short==)', '-'+'34', 'ETHUSD');

await marketOrder (page, 'Buy', 'short', '34', 'Market buy (Short==)',  '0', 'ETHUSD');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', 'no instrum', 'ETHUSD');

await deletePortfolio (page);

// await limitOrder (page, 'Sell', 'selling', '0.0900000', '3', 'Limit sell (Selling==)', '3', 'ETHBTC');
// await limitOrder (page, 'Sell', 'selling', '0.1000000', '7', 'Limit sell (Selling==)', '10', 'ETHBTC');
// await marketOrder (page, 'Sell', 'short', '31', 'Market sell (Short==)', '37', 'ETHBTC');
// await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '3', 'ETHBTC');
// await marketOrder (page, 'Buy', 'short', '10', 'Market buy (Short==)',  '27', 'ETHBTC');

// await limitOrder (page, 'Buy', 'buying', '1300.00', '21', 'Limit buy (Buying==)', '21', 'ETHUSD');
// await marketOrder (page, 'Buy', 'long', '15', 'Market buy (Long==)', '19', 'ETHUSD');
// await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '0', 'ETHUSD');
// await marketOrder (page, 'Sell', 'long', '17', 'Market sell (Long==)', '2', 'ETHUSD');


  console.log('******************************************');  
await choiceSubaccount (page, 'USD trading account');
  console.log('******************************************');  



await limitOrder (page, 'Sell', 'selling', '3', '2', 'Limit sell (Selling==)', '2', 'BTCUSD');
              
await marketOrder (page, 'Sell', 'short', '3', 'Market sell (Short==)', '-'+'3', 'BTCUSD');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '0', 'BTCUSD');

await marketOrder (page, 'Buy', 'short', '3', 'Market long (Short==)', 'empty', 'BTCUSD');



await limitOrder (page, 'Buy', 'buying', '1', '60', 'Limit buy (Buying==)', '60', 'ETHBTC');

await limitOrder (page, 'Buy', 'buying', '1', '12', 'Limit buy (Buying==)', '72', 'ETHBTC');

await marketOrder (page, 'Buy', 'long', '49', 'Market buy (Long==)', '49', 'ETHBTC');

await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '60', 'ETHBTC');

await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '0', 'ETHBTC');

await marketOrder (page, 'Sell', 'long', '10', 'Market sell (Long==)', '39', 'ETHBTC');


await limitOrder (page, 'Buy', 'buying', '1', '21', 'Limit buy (Buying==)', '21', 'ETHUSD');

await marketOrder (page, 'Buy', 'long', '19', 'Market buy (Long==)', '19', 'ETHUSD');

await deleteLimOrder (page,'buying', 'Limit delete (Buying==)', '0', 'ETHUSD');

await marketOrder (page, 'Sell', 'long', '17', 'Market sell (Long==)', '2', 'ETHUSD');


await limitOrder (page, 'Sell', 'selling', '3', '3', 'Limit sell (Selling==)', '3', 'ETHBTC');

await limitOrder (page, 'Sell', 'selling', '3', '7', 'Limit sell (Selling==)', '10', 'ETHBTC');

await marketOrder (page, 'Sell', 'short', '40', 'Market sell (Short==)', '-'+'1', 'ETHBTC');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '3', 'ETHBTC');

await deleteLimOrder (page,'selling', 'Limit delete (Selling==)', '0', 'ETHBTC');

await marketOrder (page, 'Buy', 'long', '10', 'Market buy (Long==)', '9', 'ETHBTC');

// await marketOrder (page, 'Sell', 'short', '9', 'Market sell (Short==)', 'no instrum', 'ETHBTC');

await deletePortfolio (page);

  await page.waitForTimeout(4000);
  // await browser.close();

await page.close();
      done();   
  })();
});









})
